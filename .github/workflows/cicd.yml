name: CICD

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'alpha'
      - 'beta'
  pull_request:
    types: [opened, reopened, synchronize]

env:
  semantic_version: 19

jobs:
  semantic-release:
    name: Bump Version
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ (steps.semantic.outputs.new_release_published && steps.semantic.outputs.new_release_version) || '0.0.1' }}
    steps:
    - uses: actions/checkout@v3

    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v3
      id: semantic
      with:
        semantic_version: ${{ env.semantic_version }}
        dry_run: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tests:
    name: Tests
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        global-json-file: src/global.json

    - name: Test
      working-directory: src
      run: dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura

    - name: Coverage
      uses: codecov/codecov-action@v3
      with:
        file: coverage.cobertura.xml

  build_web:
    name: Build & Deploy Web
    needs: [semantic-release, tests]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        global-json-file: src/global.json

    - name: Publish
      working-directory: src/KubeUI.Web
      run: dotnet publish -c Release -p:Version=${{ needs.semantic-release.outputs.new_release_version }} -o bin/publish

    - name: Deploy
      run: npx netlify deploy ${{ (github.ref == 'refs/heads/alpha' && '--prod') || '' }} --json -d src/KubeUI.Web/bin/publish/wwwroot
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: Purge CDN
      if: github.ref == 'refs/heads/alpha'
      run: |
        $Params = @{
          Method = 'Post'
          URI = 'https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_SITE_ID }}/purge_cache'
          Headers = @{
            'X-Auth-Email'= 'admin@kubeui.com';
            'X-Auth-Key'= '${{ secrets.CLOUDFLARE_AUTH_TOKEN }}'
          }
          Body = '{"purge_everything":true}'
          ContentType = 'application/json'
        }
        Invoke-RestMethod @Params
      shell: pwsh

    - name: Publish
      working-directory: src/KubeUI.Web
      run: Compress-Archive -Path bin/publish/wwwroot/* -DestinationPath KubeUI-${{ needs.semantic-release.outputs.new_release_version }}-web.zip
      shell: pwsh

    - uses: actions/upload-artifact@v3
      with:
        name: KubeUI-web
        path: src/KubeUI.Web/KubeUI-${{ needs.semantic-release.outputs.new_release_version }}-web.zip

  build_windows:
    name: Build Windows
    needs: [semantic-release, tests]
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        global-json-file: src/global.json

    - name: Download Inno Setup installer
      run: curl -L -o installer.exe https://jrsoftware.org/download.php/is.exe

    - name: Install Inno Setup
      run: |
        do{
          ./installer.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /DIR=inst /DOWNLOADISCRYPT=1
        } while((Test-Path ../../inst/iscc.exe) -ne $true)
      shell: pwsh

    - name: Publish
      working-directory: src/KubeUI.WPF
      run: dotnet publish -c Release -r win-x64 -p:Version=${{ needs.semantic-release.outputs.new_release_version }} -o bin/publish --self-contained -p:PublishSingleFile=true -p:DebugType=None -p:IncludeNativeLibrariesForSelfExtract=true

    - name: Package
      working-directory: src/KubeUI.WPF
      run: ../../inst/iscc.exe "/DMyAppVersion=${{ needs.semantic-release.outputs.new_release_version }}" "/DMyOutputBaseFilename=KubeUI-${{ needs.semantic-release.outputs.new_release_version }}-win-x64" .\setup.iss

    - uses: actions/upload-artifact@v3
      with:
        name: KubeUI-win-x64-setup
        path: src/KubeUI.WPF/Output/KubeUI-${{ needs.semantic-release.outputs.new_release_version }}-win-x64.exe

    - name: Publish
      working-directory: src/KubeUI.WPF
      run: Compress-Archive -Path bin/publish/* -DestinationPath KubeUI-${{ needs.semantic-release.outputs.new_release_version }}-win-x64.zip
      shell: pwsh

    - uses: actions/upload-artifact@v3
      with:
        name: KubeUI-win-x64
        path: src/KubeUI.WPF/KubeUI-${{ needs.semantic-release.outputs.new_release_version }}-win-x64.zip

  release:
    if: needs.semantic-release.outputs.new_release_published == 'true'
    name: Create Release
    needs: [build_web, build_windows]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Download artifact win-x64
      uses: actions/download-artifact@v3
      with:
        name: KubeUI-win-x64
        path: dist/

    - name: Download artifact win-x64
      uses: actions/download-artifact@v3
      with:
        name: KubeUI-win-x64-setup
        path: dist/

    - name: Download artifact web
      uses: actions/download-artifact@v3
      with:
        name: KubeUI-web
        path: dist/

    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v3
      with:
        semantic_version: ${{ env.semantic_version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
