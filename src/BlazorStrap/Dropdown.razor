@inherits ToggleableComponentBase
@using  BlazorStrap.util

<CascadingValue Value="@DropDownMenuControl">
    <DynamicElement Attributes="@UnknownParameters" TagName="div" class="@classname" @onfocusout="@LostFocus">
        @ChildContent
    </DynamicElement>
</CascadingValue>

@code {
    string classname
    {
        get
        {
            var show = "";
            if (!_manual)
            {
                show = DropDownMenuControl.Handler.IsOpen(DropDownMenuControl.Id) ? "show" : null;
            }
            else
            {
                show = (bool)IsOpen ? "show" : null;
            }
            var baseclass = IsGroup ? "btn-group" : "dropdown";
            var direction = DropdownDirection != DropdownDirection.Down ? DropdownDirection.ToDescriptionString() : null;
            return $"{baseclass} {direction} {show} {Class}".RemoveUnneededSpaces();
        }
    }
    [Parameter] private DropdownDirection DropdownDirection { get; set; } = DropdownDirection.Down;
    [Parameter] private bool IsGroup { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
    public DropDownMenuControl DropDownMenuControl { get; set; } = new DropDownMenuControl();

    protected override void OnInit()
    {
        DropDownMenuControl.Handler.OnToggle += OnToggle;
        DropDownMenuControl.Id = Guid.NewGuid().ToString();
        DropDownMenuControl.Handler.AddDropDownMenu(DropDownMenuControl.Id);
        base.OnInit();
    }

    public override void Toggle()
    {
        DropDownMenuControl.Handler.Toggle(DropDownMenuControl.Id);
        base.Toggle();
    }

    public override void Show()
    {
        DropDownMenuControl.Handler.Show(DropDownMenuControl.Id);
        base.Show();
    }

    public override void Hide()
    {
        DropDownMenuControl.Handler.Hide(DropDownMenuControl.Id);
        base.Hide();
    }

    private void LostFocus()
    {
        if (DropDownMenuControl != null)
        {
            if (DropDownMenuControl.Handler.IsOpen(DropDownMenuControl.Id))
            {
                Invoke(() => DropDownMenuControl.Handler.Toggle(DropDownMenuControl.Id));
            }
        }
    }

    private void OnToggle(Object Sender, EventArgs e)
    {
        DropDownMenuControl.Handler = DropDownMenuControl.Handler;
        StateHasChanged();
    }
}
