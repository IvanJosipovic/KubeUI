@inherits BootstrapComponentBase
@using  BlazorStrap.util

<CascadingValue Value="@DropDownMenuHandler">
    <DynamicElement Attributes="@UnknownParameters" TagName="@Tag" class="@classname">
        @ChildContent
    </DynamicElement>
</CascadingValue>
@code {
 
    private string classname
    {
        get
        {
            var vertical = IsVertical ? "flex-column" : null;
            var tabs = IsTabs ? "nav-tabs" : null;
            var pills = IsPills ? "nav-pills" : null;
            var fill = IsFill ? "nav-fill" : null;
            var navbar = IsNavbar ? "navbar-nav" : null;
            return $"nav {navbar} {tabs} {pills} {fill} {vertical} {GetAlignment()} {Class}".RemoveUnneededSpaces();
        }
    }
    private string Tag => IsList ? "ul" : "nav";

    [Parameter] private bool IsList { get; set; }
    [Parameter] private Alignment Alignment { get; set; } = Alignment.None;
    [Parameter] private bool IsVertical { get; set; }
    [Parameter] private bool IsTabs { get; set; }
    [Parameter] private bool IsPills { get; set; }
    [Parameter] private bool IsFill { get; set; }
    [Parameter] private bool IsNavbar { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
    private DropDownMenuHandler DropDownMenuHandler { get; set; } = new DropDownMenuHandler();

    private string GetAlignment()
    {
        if (Alignment == Alignment.Center) { return "justify-content-center"; }
        if (Alignment == Alignment.Right) { return "justify-content-end"; }
        return null;
    }

   protected override void OnInit()
    {
        DropDownMenuHandler.OnToggle += OnToggle;
        base.OnInit();
    }
    private void OnToggle(Object Sender, EventArgs e)
    {
        DropDownMenuHandler = DropDownMenuHandler;
        StateHasChanged();
    }
    
}
