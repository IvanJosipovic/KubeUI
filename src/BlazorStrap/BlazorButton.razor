@inherits BlazorStrap.BootstrapComponentBase
@using BlazorStrap
@using BlazorStrap.util
@using Microsoft.AspNetCore.Components

<DynamicElement TagName="@Tag" @onclick="@onclick" type="@type" class="@classname" disabled="@disabled" role="button" aria-pressed="@pressed" aria-disabled="@disabled" tabindex="@tab" value="@Value" Attributes="@UnknownParameters">
    @ChildContent
</DynamicElement>

@code {
    private string classname
    {
        get
        {
            var outline = IsOutline ? $"btn-outline-{Color.ToDescriptionString()}" : null;
            var color = Color != Color.None && !IsOutline ? $"btn-{Color.ToDescriptionString()}" : null;
            var size = Size != Size.None ? $"btn-{Size.ToDescriptionString()}" : null;
            var block = IsBlock ? "btn-block" : null;
            var active = ButtonType == ButtonType.Link && IsActive ? "active" : null;
            var linkDisabled = ButtonType == ButtonType.Link && IsDisabled ? "disabled" : null;
            return $"btn {color} {outline} {size} {block} {active} {linkDisabled} {Class}".RemoveUnneededSpaces();
        }
    }

    private string Tag { get; set; } = "button";

    private string pressed => IsActive ? "true" : null;

    private string disabled => IsDisabled ? "true" : null;

    private string tab => IsDisabled ? "-1" : null;
    
    private string type => ButtonType switch
        {
            ButtonType.Input => "button",
            ButtonType.Button => "button",
            ButtonType.Submit => "submit",
            ButtonType.Reset => "reset",
            _ => null
        };

    [Parameter] private EventCallback<UIMouseEventArgs> onclick { get; set; }
    [Parameter] private Color Color { get; set; } = Color.Primary;

    private ButtonType _buttonType = ButtonType.Button;
    [Parameter] private ButtonType ButtonType
    {
        get => _buttonType;
        set
        {
            _buttonType = value;
            Tag = _buttonType switch
            {
                ButtonType.Button => "button",
                ButtonType.Link => "a",
                ButtonType.Input => "input",
                ButtonType.Submit => "input",
                ButtonType.Reset => "input",
                ButtonType.Radio => "input",
                ButtonType.Checkbox => "input",
                _ => "button"
            };
        }
    }
    [Parameter] private bool IsOutline { get; set; }
    [Parameter] private Size Size { get; set; } = Size.None;
    [Parameter] private bool IsBlock { get; set; }
    [Parameter] private string Value { get; set; }
    [Parameter] private bool IsActive { get; set; }
    [Parameter] private bool IsDisabled { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
}
