@inherits BootstrapComponentBase
@using BlazorStrap.util
@using Microsoft.AspNetCore.Components

<DynamicElement Attributes="@UnknownParameters" TagName="@Tag" class="@classname" type="@Type" readonly="@IsReadonly" disabled="@IsDisabled" multiple="@IsMultipleSelect" size="@SelectSize" selectedIndex="@SelectedIndex" value="@Value" onchange="@onchange">
    @ChildContent
</DynamicElement>

@code {
    string classname
    {
        get
        {
            var size = Size != Size.None ? $"form-control-{Size.ToDescriptionString()}" : null;
            var isvalid = IsValid ? "is-valid" : null;
            var isinvalid = IsInvalid ? "is-invalid" : null;
            var cls = GetClass();
            return $"{isvalid} {isinvalid} {cls} {size} {Class}".RemoveUnneededSpaces();
        }
    }

    string Tag => InputType switch 
        {
            InputType.Select => "select",
            InputType.TextArea => "textarea",
            _ => "input"
        };

    [Parameter] private InputType InputType { get; set; } = InputType.Text;
    [Parameter] private Size Size { get; set; } = Size.None;
    [Parameter] private bool IsReadonly { get; set; }
    [Parameter] private bool IsPlaintext { get; set; }
    [Parameter] private bool IsDisabled { get; set; }
    [Parameter] private bool IsChecked { get; set; }
    [Parameter] private bool IsValid { get; set; }
    [Parameter] private bool IsInvalid { get; set; }
    [Parameter] private bool IsMultipleSelect { get; set; }
    [Parameter] private int? SelectSize { get; set; }
    [Parameter] private int? SelectedIndex { get; set; }
    [Parameter] private string Value { get; set; }
    [Parameter] private EventCallback<string> ValueChanged { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }

    private string Type => InputType.ToDescriptionString();
    
    private string GetClass() => this.InputType switch
        {
            InputType.Checkbox => "form-check-input",
            InputType.Radio => "form-check-input",
            InputType.File => "form-control-file",
            InputType.Range => "form-control-range",
            _ => IsPlaintext ? "form-control-plaintext" : "form-control"
        };
        
    void onchange(UIChangeEventArgs e)
    {
        ValueChanged.InvokeAsync((string)e.Value);
        Value = (string)e.Value;
    }
}
