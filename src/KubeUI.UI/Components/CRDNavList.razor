<MudNavGroup Title="Custom Resource Definitions" Expanded="Expanded" ExpandedChanged="((x) => {Expanded = x; ExpandedChanged.InvokeAsync(x);})" Icon="@NavMenu.GetIcon("resources/unlabeled/crd.svg")">
    <MudNavLink Href=@($"/list/{V1CustomResourceDefinition.KubeGroup}/{V1CustomResourceDefinition.KubeApiVersion}/{V1CustomResourceDefinition.KubeKind}") Match="NavLinkMatch.Prefix">Definitions</MudNavLink>

    @{
        var crds = CurrentCluster.GetObjects<V1CustomResourceDefinition>();
    }

    @foreach (var sld in crds.GroupBy(x => GetSLD(x.Spec.Group)).OrderBy(x => x.Key).Select(x => x.Key).ToList())
    {
        if (!ExpandedGroups.ContainsKey(sld))
        {
            ExpandedGroups.Add(sld, false);
        }

        <MudNavGroup @key="@sld" Title="@sld" @bind-Expanded="@ExpandedGroups[sld]">

            @foreach (var item2 in crds.GroupBy(x => x.Spec.Group).OrderBy(x => x.Key).Where(x => x.Key.EndsWith(sld)).ToList())
            {
                if (!ExpandedGroups2.ContainsKey(item2.Key))
                {
                    ExpandedGroups2.Add(item2.Key, false);
                }

                <MudNavGroup @key="item2.Key" Title="@item2.Key" @bind-Expanded="@ExpandedGroups2[item2.Key]">
                    @foreach (var item2 in item2.ToList())
                    {
                        <MudNavLink Href=@($"/list/{item2.Spec.Group}/{item2.Spec.Versions.First(x => x.Storage).Name}/{item2.Spec.Names.Kind}") Match="NavLinkMatch.Prefix">@item2.Spec.Names.Kind</MudNavLink>
                    }
                </MudNavGroup>
            }

        </MudNavGroup>
    }

</MudNavGroup>
