@using System.Reflection
@using System.Collections
@using System.Text.Json.Nodes
@using YamlDotNet.System.Text.Json
@typeparam TItem

<MudContainer>
    @if (Item.GetType().Namespace.Equals(typeof(V1Deployment).Namespace) ||
         Item.GetType().Namespace.StartsWith("KubernetesCRDModelGen.Models.") ||
         Item.GetType().Namespace.StartsWith("KubeUI.")
    )
    {
        foreach (var prop in Item.GetType().GetProperties().Where(ShowControl))
        {
            object value = GetValue(prop, Item);

            if (ReadOnly && value == null)
            {
                continue;
            }

            <MudTooltip Text="@prop.GetSummary()" Inline="false" RootStyle="width:100%">

                @if (prop.PropertyType == typeof(IDictionary<string, string>))
                {
                    <MudText Typo="Typo.caption" Class="@(ReadOnly ? "mud-text-disabled" : "")">@prop.Name.AddSpacesBeforeCapitals()</MudText>
                    <MudSimpleTable Style="overflow-x: auto;" Hover="true" Dense="true">
                        <thead>
                            <tr>
                                <td>Key</td>
                                <td>Value</td>
                            </tr>
                        </thead>
                        <tbody>
                            @if (value != null)
                            {
                                @foreach (var row in value as IDictionary<string, string>)
                                {
                                    <tr>
                                        <td>@row.Key</td>
                                        <td>@row.Value</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </MudSimpleTable>
                }
                else if (prop.PropertyType.IsGenericType && prop.PropertyType.GetGenericTypeDefinition() == typeof(IDictionary<,>))
                {
                }
                else if (prop.PropertyType == typeof(IList<string>))
                {
                    <MudText Typo="Typo.caption" Class="@(ReadOnly ? "mud-text-disabled" : "")">@prop.Name.AddSpacesBeforeCapitals()</MudText>
                    <MudSimpleTable Style="overflow-x: auto;" Hover="true" Dense="true">
                        <tbody>
                            @if (value != null)
                            {
                                var count = (int)typeof(ICollection<string>).GetProperty("Count").GetValue(value);

                                @for (int i = 0; i < count; i++)
                                {
                                    object[] index = { i };
                                    <tr>
                                        <td style="padding-top: 0; padding-bottom: 0">
                                            <MudTextField T="string" Value="@(prop.PropertyType.GetProperty("Item").GetValue(value, index) as string)" ValueChanged=@(x => prop.PropertyType.GetProperty("Item").SetValue(value, x, index)) Variant=" Variant.Text" Disabled="ReadOnly" Margin="Margin.Dense" />
                                        </td>
                                    </tr>
                                }
                            }

                        </tbody>
                    </MudSimpleTable>
                }
                else if (prop.PropertyType.IsGenericType && prop.PropertyType.GetGenericTypeDefinition() == typeof(IList<>))
                {
    @*                <MudText>Missing Control Type @prop.PropertyType</MudText>
    *@            }
                else if (prop.PropertyType == typeof(string) || prop.DeclaringType == typeof(string))
                {
                    <MudTextField T="string" Label="@prop.Name.AddSpacesBeforeCapitals()" Value="@(value as string)" ValueChanged="@((e) => OnChange(e, prop))" Variant="Variant.Text" Disabled="ReadOnly" />
                }
                else if (prop.PropertyType == typeof(bool) || prop.PropertyType == typeof(bool?))
                {
                    <MudSwitch T="bool?" Label="@prop.Name.AddSpacesBeforeCapitals()" Checked="@(value as bool?)" CheckedChanged="@((e) => OnChange(e, prop))" Class="mt-2" Disabled="ReadOnly"></MudSwitch>
                    <br />
                }
                else if (prop.PropertyType == typeof(int) || prop.PropertyType == typeof(int?))
                {
                    <MudNumericField T="int?" Label="@prop.Name.AddSpacesBeforeCapitals()" Value="@(value as int?)" ValueChanged="@((e) => OnChange(e, prop))" Variant="Variant.Text" Disabled="ReadOnly" />
                }
                else if (prop.PropertyType == typeof(long) || prop.PropertyType == typeof(long?))
                {
                    <MudNumericField T="long?" Label="@prop.Name.AddSpacesBeforeCapitals()" Value="@(value as long?)" ValueChanged="@((e) => OnChange(e, prop))" Variant="Variant.Text" Disabled="ReadOnly" />
                }
                else if (prop.PropertyType == typeof(double) || prop.PropertyType == typeof(double?))
                {
                    <MudNumericField T="double?" Label="@prop.Name.AddSpacesBeforeCapitals()" Value="@(value as double?)" ValueChanged="@((e) => OnChange(e, prop))" Variant="Variant.Text" Disabled="ReadOnly" />
                }
                else if (prop.PropertyType == typeof(DateTime) || prop.PropertyType == typeof(DateTime?))
                {
                    <MudDatePicker Label="@prop.Name.AddSpacesBeforeCapitals()" Date="@(value == null ? null : DateTime.Parse(value.ToString()))" DateChanged="@((e) => OnChange(e, prop))" Variant="Variant.Text" Disabled="ReadOnly" />
                }
                else if (prop.PropertyType == typeof(JsonNode) || prop.PropertyType == typeof(JsonObject))
                {
                    <MudText Typo="Typo.caption" Class="@(ReadOnly ? "mud-text-disabled" : "")">@prop.Name.AddSpacesBeforeCapitals()</MudText>
                    <div style="height: 500px">
                        <KubeMonacoEditor Value="@YamlConverter.Serialize(value)" ValueChanged="@((e) => OnChange(e, prop))" Language="yaml" ReadOnly="ReadOnly" />
                    </div>
                }
                else if (prop.PropertyType == typeof(byte[]))
                {
                    <MudText Typo="Typo.caption" Class="@(ReadOnly ? "mud-text-disabled" : "")">@prop.Name.AddSpacesBeforeCapitals()</MudText>
                    <div style="height: 500px">
                        <KubeMonacoEditor Value="@(value == null ? "" : System.Text.Encoding.UTF8.GetString(value as byte[]))" ValueChanged="@((e) => OnChange(e, prop))" Language="plaintext" ReadOnly="ReadOnly" />
                    </div>
                }
                else
                {
                    Logger.LogWarning("Controls: Unknown property type: " + prop.PropertyType.FullName);
@*                    <MudText>Missing Control Type @prop.PropertyType</MudText>
*@                }
            </MudTooltip>
        }
    }
    else
    {
        Logger.LogWarning("Controls: Unknown property type: {type}",Item.GetType());
@*        <MudText>Missing Control Object Type @(Item.GetType())</MudText>
*@    }
</MudContainer>
