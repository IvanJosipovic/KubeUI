@using k8s.Autorest;
@if (Pod.Status != null)
{
    var metrics = ClusterManager.GetActiveCluster().GetPodMetrics(Pod.Namespace(), Pod.Name());
    foreach (var status in Pod.Status.ContainerStatuses.EnsureNotEmpty())
    {
        @containerStatus.Invoke((status, metrics));
    }

    foreach (var status in Pod.Status.InitContainerStatuses.EnsureNotEmpty())
    {
        @containerStatus.Invoke((status, metrics));
    }
}

@code {
    [Inject]
    private ClusterManager ClusterManager { get; set; }

    [Parameter]
    public V1Pod Pod { get; set; }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    RenderFragment<(V1ContainerStatus, k8s.Models.PodMetrics)> containerStatus = context =>
    @<MudTooltip Placement="Placement.Right">
        <ChildContent>
            @if (context.Item1.State?.Running != null)
            {
                <MudAvatar Style="height:10px; width:10px; margin-right: 2px;" Color="Color.Success"></MudAvatar>
            }
            else if (context.Item1.State?.Waiting != null)
            {
                <MudAvatar Style="height:10px; width:10px; margin-right: 2px;" Color="Color.Warning"></MudAvatar>
            }
            else if (context.Item1.State?.Terminated != null)
            {
                if (context.Item1.State.Terminated.Reason == "Completed")
                {
                    <MudAvatar Style="height:10px; width:10px; margin-right: 2px" Color="Color.Dark"></MudAvatar>
                }
                else
                {
                    <MudAvatar Style="height:10px; width:10px; margin-right: 2px" Color="Color.Warning"></MudAvatar>
                }
            }
        </ChildContent>
        <TooltipContent>
        <div style="text-align: left">
            <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Name: </MudText>
            <MudText Typo="Typo.body2" Inline="true">@context.Item1.Name</MudText>
            @if (context.Item1.State.Running != null && context.Item1.State.Running.StartedAt.HasValue)
            {
                <p />
                <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Started at: </MudText>
                <MudText Typo="Typo.body2" Inline="true">@context.Item1.State.Running.StartedAt.Value.ToLocalTime()</MudText>

                @if(context.Item2 != null)
                {
                    <p />
                    <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">CPU: </MudText>
                    <MudText Typo="Typo.body2" Inline="true">@(ConvertCPU(context.Item2, context.Item1.Name))</MudText>
                    <p />
                    <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Memory: </MudText>
                    <MudText Typo="Typo.body2" Inline="true">@(ConvertMemory(context.Item2, context.Item1.Name))</MudText>
                }
            }
            @if (context.Item1.State.Waiting != null)
            {
                <p/>
                <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Reason: </MudText>
                <MudText Typo="Typo.body2" Inline="true">@context.Item1.State.Waiting.Reason</MudText>

                @if (!string.IsNullOrEmpty(context.Item1.State.Waiting.Message))
                {
                    <p/>
                    <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Message: </MudText>
                    <MudText Typo="Typo.body2" Inline="true">@context.Item1.State.Waiting.Message</MudText>
                }
                @if (context.Item1.State.Waiting.Reason == "CrashLoopBackOff")
                {
                    <p/>
                    <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Last State Reason: </MudText>
                    <MudText Typo="Typo.body2" Inline="true">@context.Item1.LastState.Terminated.Reason</MudText>
                    <p/>
                    <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Last State Exit Code: </MudText>
                    <MudText Typo="Typo.body2" Inline="true">@context.Item1.LastState.Terminated.ExitCode</MudText>

                    @if (!string.IsNullOrEmpty(context.Item1.LastState.Terminated.Message))
                    {
                        <p/>
                        <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Last State Message: </MudText>
                        <MudText Typo="Typo.body2" Inline="true">@context.Item1.LastState.Terminated.Message</MudText>
                    }
                }
            }
            @if (context.Item1.State.Terminated != null)
            {
                <p/>
                <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Reason: </MudText>
                <MudText Typo="Typo.body2" Inline="true">@context.Item1.State.Terminated.Reason</MudText>

                @if (!string.IsNullOrEmpty(context.Item1.State.Terminated.Message))
                {
                    <p/>
                    <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Message: </MudText>
                    <MudText Typo="Typo.body2" Inline="true">@context.Item1.State.Terminated.Message</MudText>
                    <p/>
                    <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Exit Code: </MudText>
                    <MudText Typo="Typo.body2" Inline="true">@context.Item1.State.Terminated.ExitCode</MudText>
                }
                @if (context.Item1.State.Terminated.StartedAt.HasValue)
                {
                    <p/>
                    <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Started at: </MudText>
                    <MudText Typo="Typo.body2" Inline="true">@context.Item1.State.Terminated.StartedAt.Value.ToLocalTime()</MudText>
                }
                @if (context.Item1.State.Terminated.FinishedAt.HasValue)
                {
                    <p/>
                    <MudText Typo="Typo.body2" Style="font-weight: bold" Inline="true">Finished at: </MudText>
                    <MudText Typo="Typo.body2" Inline="true">@context.Item1.State.Terminated.FinishedAt.Value.ToLocalTime()</MudText>
                }
            }
        </div>
        </TooltipContent>
    </MudTooltip>
    ;

    static string ConvertCPU(PodMetrics metrics, string podName)
    {
        var cpu = (int)(metrics.Containers.FirstOrDefault(x => x.Name == podName)?.Usage["cpu"].ToDecimal() * 1000);

        if ((int)cpu == 0)
        {
            cpu = 1;
        }

        return cpu + "m";
    }

    static string ConvertMemory(PodMetrics metrics, string podName)
    {
        return (metrics.Containers.FirstOrDefault(x => x.Name == podName)?.Usage["memory"].ToInt64() / 1048576) + "Mi";
    }
}
