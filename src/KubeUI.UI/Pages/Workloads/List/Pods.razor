@page "/list/v1/pod"

<ListGeneric TItem="V1Pod">
    <Columns>
        <ColumnComponent TItem="V1Pod" Name="Containers" Object="(x => x.Spec.Containers?.Count)" >
            <DisplayContent>
                @if (context.Item1.Status != null)
                {
                    foreach (var container in context.Item1.Status.ContainerStatuses.EnsureNotEmpty())
                    {
                        @containerStatus.Invoke(container);
                    }

                    foreach (var container in context.Item1.Status.InitContainerStatuses.EnsureNotEmpty())
                    {
                        @containerStatus.Invoke(container);
                    }
                }
            </DisplayContent>
        </ColumnComponent>
        <ColumnComponent TItem="V1Pod" Name="Restarts" Object="(x => x.Status?.ContainerStatuses?.Sum(x => x.RestartCount))" />
        <ColumnComponent TItem="V1Pod" Name="Controlled By" Object="(x => x.Metadata.OwnerReferences?.FirstOrDefault()?.Kind)">
            <DisplayContent>
                @if (context.Item1.Metadata.OwnerReferences != null && context.Item1.Metadata.OwnerReferences.Any())
                {
                    <MudLink Typo="Typo.inherit" @onclick="@(x => context.Item2.DisplayDetails(context.Item1.Metadata.NamespaceProperty, context.Item1.Metadata.OwnerReferences[0].ApiVersion, context.Item1.Metadata.OwnerReferences[0].Kind, context.Item1.Metadata.OwnerReferences[0].Name))"
                    >@context.Item1.Metadata.OwnerReferences[0].Kind</MudLink>
                }
            </DisplayContent>
        </ColumnComponent>
        <ColumnComponent TItem="V1Pod" Name="Node" Object="(x => x.Spec.NodeName)">
            <DisplayContent>
                <MudLink Typo="Typo.inherit" @onclick="@(x => context.Item2.DisplayDetails(null, V1Node.KubeGroup, V1Node.KubeApiVersion, V1Node.KubeKind, context.Item1.Spec.NodeName))">@context.Item1.Spec.NodeName</MudLink>
            </DisplayContent>
        </ColumnComponent>
        <ColumnComponent TItem="V1Pod" Name="QoS" Object="(x => x.Status?.QosClass)" />
        <ColumnComponent TItem="V1Pod" Name="Status" Object="(x => x.Status?.Phase)" >
            <DisplayContent>
                @{
                    var color = Color.Success;

                    if (context.Item1.Status?.Phase == "Failed")
                    {
                        color = Color.Error;
                    }
                    else if (context.Item1.Status?.Phase == "Pending")
                    {
                        color = Color.Warning;
                    };
                }
                <MudText Color="color" Typo="Typo.inherit">@context.Item1.Status?.Phase</MudText>
            </DisplayContent>
        </ColumnComponent>
    </Columns>
</ListGeneric>

@code {
    RenderFragment<V1ContainerStatus> containerStatus = container =>
    @<MudTooltip Placement="Placement.Right">
        <ChildContent>
            @if (container.State?.Running != null)
            {
                <MudAvatar Style="height:10px; width:10px; margin-right: 2px;" Color="Color.Success"></MudAvatar>
            }
            else if (container.State?.Waiting != null)
            {
                <MudAvatar Style="height:10px; width:10px; margin-right: 2px;" Color="Color.Warning"></MudAvatar>
            }
            else if (container.State?.Terminated != null)
            {
                if (container.State.Terminated.Reason == "Completed")
                {
                    <MudAvatar Style="height:10px; width:10px; margin-right: 2px" Color="Color.Dark"></MudAvatar>
                }
                else
                {
                    <MudAvatar Style="height:10px; width:10px; margin-right: 2px" Color="Color.Warning"></MudAvatar>
                }
            }
        </ChildContent>
        <TooltipContent>
            <MudText Typo="Typo.body2">@container.Name</MudText>
            @if (container.State.Running != null && container.State.Running.StartedAt.HasValue)
            {
                <MudText Typo="Typo.body2">Started at: @container.State.Running.StartedAt.Value.ToLocalTime()</MudText>
            }
            @if (container.State.Waiting != null)
            {
                <MudText Typo="Typo.body2">Reason: @container.State.Waiting.Reason</MudText>
                @if (!string.IsNullOrEmpty(container.State.Waiting.Message))
                {
                    <MudText Typo="Typo.body2">Message: @container.State.Waiting.Message</MudText>
                }
                @if (container.State.Waiting.Reason == "CrashLoopBackOff")
                {
                    <MudText Typo="Typo.body2">Last State Reason: @container.LastState.Terminated.Reason</MudText>
                    <MudText Typo="Typo.body2">Last State Exit Code: @container.LastState.Terminated.ExitCode</MudText>
                    @if (!string.IsNullOrEmpty(container.LastState.Terminated.Message))
                    {
                        <MudText Typo="Typo.body2">Last State Message: @container.LastState.Terminated.Message</MudText>
                    }
                }
            }
            @if (container.State.Terminated != null)
            {
                <MudText Typo="Typo.body2">Reason: @container.State.Terminated.Reason</MudText>
                @if (!string.IsNullOrEmpty(container.State.Terminated.Message))
                {
                    <MudText Typo="Typo.body2">Message: @container.State.Terminated.Message</MudText>
                }
                <MudText Typo="Typo.body2">Exit Code: @container.State.Terminated.ExitCode</MudText>
                @if (container.State.Terminated.StartedAt.HasValue)
                {
                    <MudText Typo="Typo.body2">Started at: @container.State.Terminated.StartedAt.Value.ToLocalTime()</MudText>
                }
                @if (container.State.Terminated.FinishedAt.HasValue)
                {
                    <MudText Typo="Typo.body2">Finished at: @container.State.Terminated.FinishedAt.Value.ToLocalTime()</MudText>
                }
            }
        </TooltipContent>
    </MudTooltip>;
}