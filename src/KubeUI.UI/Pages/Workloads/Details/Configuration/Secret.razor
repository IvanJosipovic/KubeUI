@page "/details/v1/secret"
@using System.Security.Cryptography;
@using System.Security.Cryptography.X509Certificates;
@using System.Text;

<DetailsGeneric Name="@Name"
                Namespace="@Namespace"
                TItem="V1Secret"
                IsInSideMenu="IsInSideMenu">
    <Overview>
        @{
            foreach (var item in context.Data)
            {
                var text =  Encoding.UTF8.GetString(item.Value);
                Span<byte> buffer = stackalloc byte[Encoding.UTF8.GetByteCount(text)];
                byte[] bytes = item.Value;

                if (Convert.TryFromBase64String(text, buffer, out var decodedBytes))
                {
                    text = Encoding.UTF8.GetString(buffer);
                    bytes = Encoding.UTF8.GetBytes(text);
                }

                if (text.StartsWith("-----BEGIN CERTIFICATE-----"))
                {
                    try
                    {
                        var cert = new X509Certificate2(bytes);

                        <OverviewSection Title=@($"Certificate Info: {item.Key}")>
                            <OverviewSectionItem Title="Issuer" Value="@(cert.Issuer)" />
                            <OverviewSectionItem Title="Subject" Value="@(cert.SubjectName.Name)" />

                            @{
                                X509SubjectAlternativeNameExtension san = cert.Extensions.OfType<X509SubjectAlternativeNameExtension>().FirstOrDefault();

                                if (san != null && san.EnumerateDnsNames().Any())
                                {
                                    <OverviewSectionItem Title="SAN" Value="@(san.EnumerateDnsNames().Aggregate((x,y) => $"{x}, {y}"))" />
                                }

                                if (san != null && san.EnumerateIPAddresses().Any())
                                {
                                    <OverviewSectionItem Title="SAN IP" Value="@(san.EnumerateIPAddresses().Select(x => x.ToString()).Aggregate((x,y) => $"{x}, {y}"))" />
                                }
                            }

                            <OverviewSectionItem Title="Not Before" Value="@(cert.NotBefore.ToLocalTime().ToString())" />
                            <OverviewSectionItem Title="Expires" Value="@($"{cert.NotAfter.ToLocalTime()} (Valid:{(cert.NotAfter.ToLocalTime() - DateTime.Now).Days} days)")" />
                        </OverviewSection>
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error Loading {item}", item.Key);
                    }
                }
                else if (text.StartsWith("-----BEGIN RSA PRIVATE KEY-----"))
                {
                    try
                    {
                        RSA key = RSA.Create();
                        key.ImportFromPem(text.ToCharArray());

                        <OverviewSection Title=@($"Certificate Info: {item.Key}")>
                            <OverviewSectionItem Title="Signature Algorithm" Value="@key.SignatureAlgorithm" />
                            <OverviewSectionItem Title="Key Size" Value="@key.KeySize.ToString()" />
                        </OverviewSection>
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error Loading {item}", item.Key);
                    }
                }
            }
        }
    </Overview>
    <Tabs>
    </Tabs>
</DetailsGeneric>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string Namespace { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Name { get; set; }

    [Parameter]
    public bool IsInSideMenu { get; set; }

    [Inject]
    private ClusterManager ClusterManager { get; set; }

    [Inject]
    private ILogger<Secret> Logger { get; set; }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }
}