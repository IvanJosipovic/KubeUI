@typeparam TNode

<div class="uic-tree @(Visible ? "" : "uic-tree--hidden")">

    @foreach (var node in Nodes ?? Enumerable.Empty<TNode>())
    {
        var nodeExpanded = ExpandedNodes.Contains(node);
        var nodeSelected = node.Equals(SelectedNode);
        var casted = node as TreeItem;

        <div>

            @if (casted.Children.Any())
            {
                <span class="uic-tree__icon" @onclick="@(() => OnToggleNode(node, !nodeExpanded))">
                    <i class="@(nodeExpanded ? Style.CollapseNodeIconClass : Style.ExpandNodeIconClass)"></i>
                </span>
            }

            <div class="uic-tree__title">
                <span class="@(nodeSelected ? Style.NodeTitleSelectedClass : @Style.NodeTitleClass)" @onclick="@(() => OnSelectTreeItem(node))" @onmouseover="@(() => OnMouseOverNode(node))">
                    @casted.Name

                    @if (casted.IsCollectionItem)
                    {
                        <a href="javascript:;" @onclick="@(() => Delete(casted.Parent, casted.Object))" title="Delete"><i class="fa fa-trash"></i></a>
                    }

                    @if (casted.IsCollection)
                    {
                        <a href="javascript:;" @onclick="@(() => AddNew(casted.Object))" title="Add New @casted.Name"><i class="fa fa-plus"></i></a>
                    }
                </span>
            </div>

            @if (casted.Children.Any())
            {
                <Tree3 Nodes="@(casted.Children as IEnumerable<TNode>)"

                       ExpandedNodes="ExpandedNodes"
                       ExpandedNodesChanged="ExpandedNodesChanged"

                       SelectedNode="SelectedNode"
                       SelectedNodeChanged="SelectedNodeChanged"

                       MouseOverNode="MouseOverNode"
                       MouseOverChanged="MouseOverChanged"

                       Visible="nodeExpanded" />
            }

        </div>
    }

</div>

@code {

    [Parameter] IEnumerable<TNode> Nodes { get; set; }

    [Parameter] TNode SelectedNode { get; set; }
    [Parameter] EventCallback<TNode> SelectedNodeChanged { get; set; }

    [Parameter] TNode MouseOverNode { get; set; }
    [Parameter] EventCallback<TNode> MouseOverChanged { get; set; }

    [Parameter] IList<TNode> ExpandedNodes { get; set; } = new List<TNode>();
    [Parameter] EventCallback<IList<TNode>> ExpandedNodesChanged { get; set; }

    [Parameter] TreeStyle Style { get; set; } = TreeStyle.Bootstrap;

    [Parameter] bool Visible { get; set; } = true;

    private void OnToggleNode(TNode node, bool expand)
    {
        var expanded = ExpandedNodes.Contains(node);

        if (expanded && !expand)
        {
            ExpandedNodes.Remove(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
        else if (!expanded && expand)
        {
            ExpandedNodes.Add(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
    }

    private void OnSelectTreeItem(TNode node)
    {
        var casted = node as TreeItem;

        if (!casted.IsCollection || casted.HideLink)
        {
            SelectedNode = node;
            SelectedNodeChanged.InvokeAsync(node);
        }
    }

    private void OnMouseOverNode(TNode node)
    {
        MouseOverNode = node;
        MouseOverChanged.InvokeAsync(node);
    }

    private void AddNew(object obj)
    {
        var genType = obj.GetType().GetTypeInfo().GenericTypeArguments[0];

        var newObj = Activator.CreateInstance(genType);

        object[] data = { newObj };

        obj.GetType().GetMethod("Add").Invoke(obj, data);
    }

    private void Delete(object collection, object item)
    {
        object[] data = { item };

        collection.GetType().GetMethod("Remove").Invoke(collection, data);
    }

    public class TreeStyle
    {
        public static readonly TreeStyle Bootstrap = new TreeStyle
        {
            ExpandNodeIconClass = "fa fa-caret-right curosr-pointer",
            CollapseNodeIconClass = "fa fa-caret-down curosr-pointer",
            NodeTitleClass = "text-primary curosr-pointer",
            NodeTitleSelectedClass = "text-primary font-weight-bold font-italic curosr-pointer"
        };

        public string ExpandNodeIconClass { get; set; }
        public string CollapseNodeIconClass { get; set; }
        public string NodeTitleClass { get; set; }
        public string NodeTitleSelectedClass { get; set; }
    }
}