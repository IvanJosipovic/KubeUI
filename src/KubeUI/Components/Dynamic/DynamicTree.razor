@typeparam TItem

@if (Item != null)
{
    <ul style="padding-left:20px">
        @foreach (var property in Item.GetType()
            .GetProperties()
            .Where(x => 
            x.PropertyType.FullName.StartsWith("KubeUI.Schema.") || 
            x.PropertyType.FullName.StartsWith("System.Collections."))
            )
        {
            var attributes = TypeDescriptor.GetProperties(Item.GetType())[property.Name].Attributes;

            if (IsIgnore(attributes) || !ShouldShow(attributes))
            {
                continue;
            }

            var item = property.GetValue(Item);
            if (item == null)
            {
                item = Activator.CreateInstance(property.PropertyType);
                property.SetValue(Item, item);
            }

            if (IsDisplayInTree(attributes))
            {
                var genType = property.PropertyType.GetTypeInfo().GenericTypeArguments[0];

                <li>
                    <span onmouseover="@(() => SetHelp.Invoke(property.GetSummary()))">@property.Name.AddSpacesToSentence().TrimVersionNumbers() </span> <a href="javascript:;" onclick="@((e) => AddNew(item))" title="Add New @property.Name.AddSpacesToSentence().TrimVersionNumbers()"><i class="fa fa-plus"></i></a>

                    <ul style="padding-left:20px">
                        @{int n = (int)property.PropertyType.GetProperty("Count").GetValue(item);}
                        @for (int i = 0; i < n; i++)
                        {
                            object[] index = { i };

                            object myObject = property.PropertyType.GetProperty("Item").GetValue(item, index);

                            var propertyValue = genType.GetProperty(GetDisplayInTreeName(attributes))?.GetValue(myObject);

                            if (propertyValue == null)
                            {
                                propertyValue = $"Item {index[0]}";
                            }
                            <li>
                                <a href="javascript:;" onclick="@(() => RenderForm.Invoke(myObject) )" onmouseover="@(() => SetHelp.Invoke(property.GetSummary()))">@propertyValue.ToString().AddSpacesToSentence().TrimVersionNumbers()</a>
                                <a href="javascript:;" onclick="@(() => Delete(item, (int)index[0]))" title="Delete"><i class="fa fa-trash"></i></a>
                                <DynamicTree Item="@myObject" RenderForm="@RenderForm" SetHelp="@SetHelp"></DynamicTree>
                            </li>
                        }
                    </ul>
                </li>
            }
            else if (!property.PropertyType.FullName.StartsWith("System.Collections."))
            {
                <li>
                    @if (!property.PropertyType.GetProperties().Where(x => !x.PropertyType.FullName.StartsWith("KubeUI.Schema.") &&
                    !IsDisplayInTree(attributes) && !IsIgnore(attributes)
                    ).Any()
                    )
                    {
                        <span onmouseover="@(() => SetHelp.Invoke(property.GetSummary()))">@property.Name.AddSpacesToSentence().TrimVersionNumbers()</span>
                    }
                    else
                    {
                        <a href="javascript:;" onclick="@(() => RenderForm.Invoke(item) )" onmouseover="@(() => SetHelp.Invoke(property.GetSummary()))">@property.Name.AddSpacesToSentence().TrimVersionNumbers()</a>
                    }
                    <DynamicTree Item="item" RenderForm="@RenderForm" SetHelp="@SetHelp"></DynamicTree>
                </li>
            }
        }
    </ul>
}

@functions{
    [Parameter] TItem Item { get; set; }
    [Parameter] Action<TItem> ItemChanged { get; set; }
    [Parameter] Action<object> RenderForm { get; set; }
    [Parameter] protected Action<object> SetHelp { get; set; }

    [Inject] protected IState state { get; set; }

    protected override void OnInit()
    {
    }

    private void AddNew(object obj)
    {
        var genType = obj.GetType().GetTypeInfo().GenericTypeArguments[0];

        var newObj = Activator.CreateInstance(genType);

        object[] data = { newObj };

        obj.GetType().GetMethod("Add").Invoke(obj, data);

        StateHasChanged();
    }

    private void Delete(object obj, int id)
    {
        object[] data = { id };

        obj.GetType().GetMethod("RemoveAt").Invoke(obj, data);

        StateHasChanged();
    }

    private bool ShouldShow(AttributeCollection attributes)
    {
        var attr = attributes.OfType<UILevelAttribute>().FirstOrDefault();

        if (attr != null)
        {
            return (int)state.GetUILevel() >= (int)attr.UILevel;
        }

        return true;
    }

    private bool IsIgnore(AttributeCollection attributes)
    {
        return attributes.OfType<IgnoreAttribute>().Any();
    }

    private bool IsDisplayInTree(AttributeCollection attributes)
    {
        return attributes.OfType<DisplayInTreeAttribute>().Any();
    }

    private string GetDisplayInTreeName(AttributeCollection attributes)
    {
        var result = attributes.OfType<DisplayInTreeAttribute>().FirstOrDefault();

        if (result == null)
        {
            throw new Exception("GetDisplayInTreeName Attribute is missing");
        }

        return result.DisplayName;
    }
}
