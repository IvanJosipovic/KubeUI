@typeparam TItem

@if (Item != null)
{
    <BSRow>
        <BSCol SM="3" MD="3">
            <BSCard Class="sticky-top sticky-offset">
                <BSCard CardType="CardType.Header" HeadingSize="HeadingSize.H5">
                    <a href="javascript:;" @onclick="@(() => RenderForm(Item))" @onmouseover="@(() => SetHelp(Item.GetType().GetSummary()))">@Item.GetType().Name.AddSpacesToSentence().TrimVersionNumbers()</a>
                    <div class="pull-right">
                        <a href="javascript:;" @onclick="@(() => ShowCode(Item))" @onmouseover="@(() => SetHelp("Show Code"))"><i class="fa fa-code"></i></a>
                    </div>
                </BSCard>
                <BSCard CardType="CardType.Body" style="padding-left:0">
                    <Tree Item="@Item" RenderForm="@RenderForm" SetHelp="@SetHelp" />
                </BSCard>
            </BSCard>
        </BSCol>

        <BSCol SM="6" MD="6">
            @Controls
        </BSCol>
        
        <BSCol SM="3" MD="3">
            <BSCard Class="sticky-top sticky-offset">
                <BSCard CardType="CardType.Header" HeadingSize="HeadingSize.H5">
                    Help
                </BSCard>
                <BSCard CardType="CardType.Body">
                    <Help HelpString="@Help" />
                </BSCard>
            </BSCard>
        </BSCol>
    </BSRow>
}

<BSModal @bind-IsOpen="@ModalIsOpen" Size="Size.Large">
    <BSModalHeader @onclick="@(() => CloseModal())">Code</BSModalHeader>
    <BSModalBody>
        <pre><code id="yamlViewer" class="yaml">@MDLBody</code></pre>
    </BSModalBody>
</BSModal>

@code{
    [Parameter] TItem Item { get; set; }
    [Parameter] EventCallback<TItem> ItemChanged { get; set; }

    [Inject] IState state { get; set; }
    [Inject] private IAppInsights appInsights { get; set; }

    private RenderFragment Controls { get; set; }

    private string Help { get; set; } = "Hover over a control to see help here.";

    private bool ModalIsOpen { get; set; }

    private string MDLBody { get; set; }

    protected override void OnInit()
    {
        RenderForm(Item);

        state.PropertyChanged += (xo, e) =>
        {
            StateHasChanged();
        };
    }

    public void Dispose()
    {
        state.PropertyChanged -= (xo, e) =>
        {
            StateHasChanged();
        };
    }

    private void RenderForm(object obj)
    {
        Controls = builder =>
        {
            builder.OpenComponent(0, typeof(KubeUI.Components.Dynamic.Controls<>).MakeGenericType(obj.GetType()));
            builder.AddAttribute(1, "Item", obj);
            builder.AddAttribute(2, "SetHelp", EventCallback.Factory.Create<object>(this, (e) => SetHelp(e)));
            //builder.AddAttribute(3, "ItemChanged", EventCallback.Factory.Create(this, (e) => obj = e ));
            //builder.AddAttribute(2, "ItemChanged", __value => obj = __value);
            builder.CloseComponent();
        };
        StateHasChanged();
    }

    private void SetHelp(object obj)
    {
        Help = obj.ToString();
    }

    private void ShowCode(object obj)
    {
        appInsights.TrackEvent("ShowCode");

        bool isJson = false;

        if (isJson)
        {
            MDLBody = JsonConvert.SerializeObject(obj.Clone().GutObject(), State.JsonSettings);
        }
        else
        {
            var serializer = new SerializerBuilder()
                .WithTypeInspector(x => new JsonPropertyTypeInspector(x))
                .Build();

            MDLBody = serializer.Serialize(obj.Clone().GutObject());
        }

        ModalIsOpen = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        ModalIsOpen = false;
        StateHasChanged();
    }
}