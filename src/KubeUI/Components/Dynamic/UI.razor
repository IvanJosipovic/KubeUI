@typeparam TItem

@if (Item != null)
{
    <BSRow>
        <BSCol SM="3" MD="3">
            <BSCard Class="sticky-top sticky-offset">
                <BSCard CardType="CardType.Header" HeadingSize="HeadingSize.H5">
                    <a href="javascript:;" @onclick="@(() => RenderForm(Item))" @onmouseover="@(() => SetHelp(Item.GetType().GetSummary()))">@Item.GetType().Name.AddSpacesToSentence().TrimVersionNumbers()</a>
                    <div class="pull-right">
                        <a href="javascript:;" @onclick="@(() => ShowCode(Item))" @onmouseover="@(() => SetHelp("Show Code"))"><i class="fa fa-code"></i></a>
                    </div>
                </BSCard>
                <BSCard CardType="CardType.Body">                  
                    <Tree3 Nodes="Trees" @bind-ExpandedNodes="ExpandedNodes" @bind-SelectedNode="SelectedNode" MouseOverNodeChanged="@((TreeItem t) => SetHelp(t.Summary))" />
                </BSCard>
            </BSCard>
        </BSCol>

        <BSCol SM="6" MD="6">
            @Controls
        </BSCol>
        
        <BSCol SM="3" MD="3">
            <BSCard Class="sticky-top sticky-offset">
                <BSCard CardType="CardType.Header" HeadingSize="HeadingSize.H5">
                    Help
                </BSCard>
                <BSCard CardType="CardType.Body">
                    <Help HelpString="@Help" />
                </BSCard>
            </BSCard>
        </BSCol>
    </BSRow>
}

<BSModal @ref="BSModal" Size="Size.Large">
    <BSModalHeader OnClick="@(() => CloseModal())">Code</BSModalHeader>
    <BSModalBody>
        <pre><code id="yamlViewer" class="yaml">@MDLBody</code></pre>
    </BSModalBody>
</BSModal>

@code{
    [Parameter] TItem Item { get; set; }
    [Parameter] EventCallback<TItem> ItemChanged { get; set; }

    [Inject] ILogger<UI<TItem>> Logger { get; set; }
    [Inject] IState state { get; set; }
    [Inject] private IAppInsights appInsights { get; set; }

    private RenderFragment Controls { get; set; }

    private string Help { get; set; } = "Hover over a control to see help here.";

    private string MDLBody { get; set; }

    private BSModal BSModal;

    private List<TreeItem> Trees { get; set; } = new List<TreeItem>();

    public List<TreeItem> BuildTree(object obj, KubeUI.UILevel uILevel)
    {
        if (obj.GetType().FullName.StartsWith("System.Collections."))
        {
            return new List<TreeItem>();
        }

        //Logger.LogDebug("BuildTree {0}", obj.GetType());

        List<TreeItem> Tree = new List<TreeItem>();

        foreach (var property in obj.GetType()
            .GetProperties()
            .Where(x =>
            x.PropertyType.FullName.StartsWith("KubeUI.Schema.") ||
            x.PropertyType.FullName.StartsWith("System.Collections."))
            )
        {
            try
            {
                //Logger.LogDebug("BuildTree {0}", property.PropertyType);

                var attributes = TypeDescriptor.GetProperties(obj.GetType())[property.Name].Attributes;

                if (Common.IsIgnore(attributes) || !Common.ShouldShow(attributes, uILevel))
                {
                    //Logger.LogDebug("BuildTree {0} Ignorning", property.PropertyType);
                    continue;
                }

                var item = property.GetValue(obj);
                if (item == null)
                {
                    item = Activator.CreateInstance(property.PropertyType);
                    property.SetValue(obj, item);
                }

                if (Common.IsDisplayInTree(attributes))
                {
                    Tree.Add(new TreeItem()
                    {
                        Attributes = attributes,
                        Name = property.Name.AddSpacesToSentence().TrimVersionNumbers(),
                        Children = GetCollectionItems(item, attributes, uILevel),
                        Object = item,
                        Summary = property.GetSummary(),
                        IsCollection = true,
                        HideLink = Common.ShouldHideLink(property.PropertyType)
                    });
                }
                else if (!property.PropertyType.FullName.StartsWith("System.Collections."))
                {
                    Tree.Add(new TreeItem()
                    {
                        Attributes = attributes,
                        Name = property.Name.AddSpacesToSentence().TrimVersionNumbers(),
                        Children = BuildTree(item, uILevel),
                        Object = item,
                        Summary = property.GetSummary(),
                        HideLink = Common.ShouldHideLink(property.PropertyType)
                    });
                }
            }
            catch (Exception e)
            {
                Logger.LogError(e, "BuildTree Failed: " + e.Message);
            }
        }

        return Tree;
    }

    public List<TreeItem> GetCollectionItems(object collection, AttributeCollection attributes , KubeUI.UILevel uILevel)
    {
        var tree = new List<TreeItem>();
        var type = collection.GetType();
        var genType = type.GetTypeInfo().GenericTypeArguments[0];

        int n = (int)type.GetProperty("Count").GetValue(collection);

        for (int i = 0; i < n; i++)
        {
            object[] index = { i };

            object myObject = type.GetProperty("Item").GetValue(collection, index);

            string displayPropertyName = Common.GetDisplayInTreeName(attributes);

            string propertyValue = null;

            if (displayPropertyName != null)
            {
                var property = genType.GetProperty(displayPropertyName);

                propertyValue = property?.GetValue(myObject)?.ToString();
            }

            if (string.IsNullOrEmpty(propertyValue))
            {
                propertyValue = $"Item {index[0]}";
            }

            tree.Add(new TreeItem()
            {
                Name = propertyValue,
                Children = BuildTree(myObject, uILevel),
                Object = myObject,
                Summary = genType.GetSummary(),
                IsCollectionItem = true,
                Parent = collection
            });
        }

        return tree;
    }

    IList<TreeItem> ExpandedNodes { get; set; } = new List<TreeItem>();

    private TreeItem _SelectedNode;

    public TreeItem SelectedNode
    {
        get { return _SelectedNode; }
        set {
            _SelectedNode = value;
            RenderForm(_SelectedNode.Object);
        }
    }

    protected override void OnInit()
    {
        Trees = BuildTree(Item, state.GetUILevel());

        RenderForm(Item);

        state.PropertyChanged += (xo, e) =>
        {
            StateHasChanged();
        };
    }

    public void Dispose()
    {
        state.PropertyChanged -= (xo, e) =>
        {
            StateHasChanged();
        };
    }

    private void RenderForm(object obj)
    {
        Controls = builder =>
        {
            builder.OpenComponent(0, typeof(KubeUI.Components.Dynamic.Controls<>).MakeGenericType(obj.GetType()));
            builder.AddAttribute(1, "Item", obj);
            builder.AddAttribute(2, "SetHelp", EventCallback.Factory.Create<object>(this, (e) => SetHelp(e)));
            //builder.AddAttribute(3, "ItemChanged", EventCallback.Factory.Create(this, (e) => obj = e ));
            //builder.AddAttribute(2, "ItemChanged", __value => obj = __value);
            builder.CloseComponent();
        };
        StateHasChanged();
    }

    private void SetHelp(object obj)
    {
        Help = obj.ToString();
    }

    private void ShowCode(object obj)
    {
        appInsights.TrackEvent("ShowCode");

        bool isJson = false;

        if (isJson)
        {
            MDLBody = JsonConvert.SerializeObject(obj.Clone().GutObject(), State.JsonSettings);
        }
        else
        {
            var serializer = new SerializerBuilder()
                .WithTypeInspector(x => new JsonPropertyTypeInspector(x))
                .Build();

            MDLBody = serializer.Serialize(obj.Clone().GutObject());
        }

        BSModal.Toggle();
    }

    private void CloseModal()
    {
        BSModal.Toggle();
    }
}