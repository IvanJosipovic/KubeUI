@page "/{TypeParam}"

<h2>
    @if (Type != null)
    {
        @Type.Name.AddSpacesToSentence().TrimVersionNumbers() <a href="javascript:;" @onclick="@(() => AddNew())" id="AddNew" title="Add New @Type.Name.AddSpacesToSentence().TrimVersionNumbers()"><i class="fa fa-plus"></i></a>
    }
</h2>

<br />

<BSRow>
    <BSCol SM="12" LG="6" XL="6">
        <BSTable IsBordered="true" IsHovarable="true" IsSmall="true" IsStriped="true" IsResponsive="true">
            <BSTableHead TableHeadType="TableHeadType.Light">
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Namespace</th>
                    <th scope="col">Actions</th>
                </tr>
            </BSTableHead>
            <tbody>
                @if (Collection != null)
                {
                    @for (int i = 0; i < (int)Collection.GetType().GetProperty("Count").GetValue(Collection); i++)
                    {
                        object[] index = { i };
                        var item = Collection.GetType().GetProperty("Item").GetValue(Collection, index);
                        var meta = Type.GetProperty("Metadata").GetValue(item);

                        var name = meta.GetType().GetProperty("Name").GetValue(meta);
                        var nameSpace = meta.GetType().GetProperty("Namespace").GetValue(meta);
                        <tr>
                            <td>
                                <a href="/@Type.Name.TrimVersionNumbers()/@i">@name</a>
                            </td>
                            <td>
                                @nameSpace
                            </td>
                            <td style="width:20px; text-align: center">
                                <a href="javascript:;" @onclick="@(() => { State.DeleteItem(Type, (int)index[0]); })" title="Delete @Type.Name.TrimVersionNumbers()"><i class='fa fa-trash' aria-hidden='true'></i></a>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </BSTable>
    </BSCol>
</BSRow>


@code{
    [Parameter] public string TypeParam { get; set; }

    [Inject] ILogger<List> Logger { get; set; }
    [Inject] IState State { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }

    private Type Type { get; set; }
    private object Collection { get; set; }

    protected override void OnParametersSet()
    {
        if (TypeParam == "Ingress")
        {
            TypeParam = "Ingress2";
        }

        Type = AppDomain.CurrentDomain.GetAssemblies()
        .SelectMany(t => t.GetTypes())
        .Where(t => t.IsClass && t.Namespace == "KubeUI.Schema" && t.Name == TypeParam)
        .FirstOrDefault();

        if (Type == null)
        {
            Logger.LogInformation("Couldn't find Type {0}", TypeParam);
            NavigationManager.NavigateTo("");
        }
        else
        {
            Collection = State.GetCollection(Type);
        }
    }

    private void AddNew()
    {
        var id = State.AddItem(Type);

        NavigationManager.NavigateTo($"/{Type.Name}/" + id);
    }
}