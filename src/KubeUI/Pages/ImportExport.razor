@page "/ImportExport"

<Row>
    <BlazorCol SM="12" LG="6" XL="4">
        <Card>
            <Card CardType="CardType.Header" HeadingSize="HeadingSize.H5">
                Import
            </Card>
            <Card CardType="CardType.Body">
                <div class="input-group">
                    <div class="custom-file col-sm-6 col-md-6">
                        <input type="file" class="custom-file-input" id="customFile" @ref="@inputTypeFileElement" multiple accept=".json,.yaml,.yml" />
                        <label class="custom-file-label" for="customFile">Choose file(s)</label>
                    </div>
                    <span>&nbsp;&nbsp;&nbsp;</span>
                    <BlazorButton @onclick="@ReadFiles">Read file(s)</BlazorButton>
                </div>
            </Card>
        </Card>
    </BlazorCol>
    <BlazorCol SM="12" LG="6" XL="4">
        <Card>
            <Card CardType="CardType.Header" HeadingSize="HeadingSize.H5">
                Export
            </Card>
            <Card CardType="CardType.Body">
                <div class="input-group">
                    <BlazorButton @onclick="@Export">Export</BlazorButton>
                    <span>&nbsp;&nbsp;&nbsp;</span>
                    <FormGroup IsRow="false" IsCheck="true">
                        <BlazorLabel For="@nameof(isJson)" Class="col-form-label" IsCheck="true" title="Select to export as Json, otherwise Yaml will be used.">
                            <input class="form-check-input" type="checkbox" id="@nameof(isJson)" @bind="@isJson" />
                            Json
                        </BlazorLabel>
                    </FormGroup>
                </div>
            </Card>
        </Card>
    </BlazorCol>
</Row>

@code {
    ElementRef inputTypeFileElement;

    [Inject] private IFileReaderService fileReaderService { get; set; }
    [Inject] private IBlazorFileSaver blazorFileSaver { get; set; }
    [Inject] private IState state { get; set; }
    [Inject] private IAppInsights appInsights { get; set; }

    bool isJson = false;

    public async void ReadFiles(UIMouseEventArgs args)
    {
        appInsights.TrackEvent("ReadFile");

        foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
        {
            using (Stream stream = await file.OpenReadAsync())
            {
                using (StreamReader reader = new StreamReader(stream))
                {
                    state.ImportObject(await reader.ReadToEndAsync());
                }
            }
        }
        state.RaisePropertyChanged();
    }

    public void Export(UIMouseEventArgs args)
    {
        appInsights.TrackEvent("Export");

        using (MemoryStream ms = new MemoryStream())
        {
            using (ZipOutputStream zipSream = new ZipOutputStream(ms))
            {
                int count = 0;

                foreach (var coll in state.Data)
                {
                    foreach (var item in coll.Value)
                    {
                        var meta = coll.Key.GetProperty("Metadata").GetValue(item);

                        string name = meta.GetType().GetProperty("Name").GetValue(meta)?.ToString();

                        AddToZip(item, name);
                    }
                }

                void AddToZip(object obj, string name)
                {
                    string data;
                    var newObj = obj.GutObject();

                    if (isJson)
                    {
                        data = JsonConvert.SerializeObject(newObj, State.JsonSettings);
                    }
                    else
                    {
                        var serializer = new SerializerBuilder()
                            .WithTypeInspector(x => new JsonPropertyTypeInspector(x))
                            .Build();
                        data = serializer.Serialize(newObj);
                    }

                    if (string.IsNullOrEmpty(name))
                    {
                        name = "Item " + count;
                    }

                    var entry = new ZipEntry(name + $"-{newObj.GetType().Name.TrimVersionNumbers()}.{(isJson ? "json" : "yaml")}");

                    zipSream.PutNextEntry(entry);

                    byte[] bytes = Encoding.ASCII.GetBytes(data);

                    zipSream.Write(bytes, 0, bytes.Length);

                    count++;
                }
            }

            blazorFileSaver.SaveAsBase64($"KubeUI-Export-{DateTime.Now.Ticks}.zip", Convert.ToBase64String(ms.ToArray()), "application/zip");
        }
    }
}