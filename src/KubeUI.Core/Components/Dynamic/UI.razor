@typeparam TItem where TItem : class, IKubernetesObject<V1ObjectMeta>, new()

@if (Item != null)
{
    <MudGrid Spacing="1">
        <MudItem xs="3">
            <MudPaper Class="d-flex align-left justify-left mud-width-full mt-3" Elevation="3">
                <Tree TItem="TItem" Item="ItemCopy" ObjectSelected="(x) => RenderForm(x)" ReadOnly="true" />
            </MudPaper>
        </MudItem>
        <MudItem xs="9">
            <MudPaper Class="d-flex align-center justify-center mud-width-full mt-3" Elevation="3">@Controls</MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter] public TItem Item { get; set; }

    [Parameter] public TItem ItemCopy { get; set; }

    private RenderFragment Controls;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ItemCopy = Utilities.CloneObject(Item);

        RenderForm(ItemCopy);
    }

    private void RenderForm(object obj)
    {
        Controls = builder =>
        {
            builder.OpenComponent(0, typeof(KubeUI.Core.Components.Dynamic.Controls<>).MakeGenericType(obj.GetType()));
            builder.AddAttribute(1, "Item", obj);
            builder.AddAttribute(2, "ReadOnly", true);
            //builder.AddAttribute(2, "SetHelp", EventCallback.Factory.Create<object>(this, (e) => SetHelp(e)));
            //builder.AddAttribute(3, "ItemChanged", EventCallback.Factory.Create(this, (e) => obj = e ));
            //builder.AddAttribute(2, "ItemChanged", __value => obj = __value);
            builder.CloseComponent();
        };
        StateHasChanged();
    }
}
