<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KubeUI.Core</name>
    </assembly>
    <members>
        <member name="T:KubeUI.Core.DisplayInTreeAttribute">
            <summary>
            Display this collection in the tree
            </summary>
        </member>
        <member name="P:KubeUI.Core.DisplayInTreeAttribute.DisplayName">
            <summary>
            The Name of the property to display in the tree
            </summary>
        </member>
        <member name="T:KubeUI.Core.IgnoreAttribute">
            <summary>
            This object will not be visible in the UI
            </summary>
        </member>
        <member name="T:KubeUI.Core.SelectListAttribute">
            <summary>
            Display this control as a select list
            </summary>
        </member>
        <member name="P:KubeUI.Core.SelectListAttribute.Options">
            <summary>
            Select list options
            </summary>
        </member>
        <member name="T:KubeUI.Core.UILevelAttribute">
            <summary>
            The control will only be visible on this UILevel or above
            </summary>
        </member>
        <member name="P:KubeUI.Core.UILevelAttribute.UILevel">
            <summary>
            Which UILevel this control should be displayed in
            </summary>
        </member>
        <member name="T:KubeUI.Core.DocumenationExtensions">
            <summary>
            Utility class to provide documentation for various types where available with the assembly
            </summary>
        </member>
        <member name="M:KubeUI.Core.DocumenationExtensions.GetDocumentation(System.Reflection.MethodInfo)">
            <summary>
            Provides the documentation comments for a specific method
            </summary>
            <param name="methodInfo">The MethodInfo (reflection data ) of the member to find documentation for</param>
            <returns>The XML fragment describing the method</returns>
        </member>
        <member name="M:KubeUI.Core.DocumenationExtensions.GetDocumentation(System.Reflection.MemberInfo)">
            <summary>
            Provides the documentation comments for a specific member
            </summary>
            <param name="memberInfo">The MemberInfo (reflection data) or the member to find documentation for</param>
            <returns>The XML fragment describing the member</returns>
        </member>
        <member name="M:KubeUI.Core.DocumenationExtensions.GetSummary(System.Reflection.MemberInfo)">
            <summary>
            Returns the Xml documenation summary comment for this member
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:KubeUI.Core.DocumenationExtensions.GetDocumentation(System.Type)">
            <summary>
            Provides the documentation comments for a specific type
            </summary>
            <param name="type">Type to find the documentation for</param>
            <returns>The XML fragment that describes the type</returns>
        </member>
        <member name="M:KubeUI.Core.DocumenationExtensions.GetSummary(System.Type)">
            <summary>
            Gets the summary portion of a type's documenation or returns an empty string if not available
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:KubeUI.Core.DocumenationExtensions.XmlFromName(System.Type,System.Char,System.String)">
            <summary>
            Obtains the XML Element that describes a reflection element by searching the 
            members for a member that has a name that describes the element.
            </summary>
            <param name="type">The type or parent type, used to fetch the assembly</param>
            <param name="prefix">The prefix as seen in the name attribute in the documentation XML</param>
            <param name="name">Where relevant, the full name qualifier for the element</param>
            <returns>The member that has a name that describes the specified reflection element</returns>
        </member>
        <member name="F:KubeUI.Core.DocumenationExtensions.Cache">
            <summary>
            A cache used to remember Xml documentation for assemblies
            </summary>
        </member>
        <member name="F:KubeUI.Core.DocumenationExtensions.FailCache">
            <summary>
            A cache used to store failure exceptions for assembly lookups
            </summary>
        </member>
        <member name="M:KubeUI.Core.DocumenationExtensions.XmlFromAssembly(System.Reflection.Assembly)">
            <summary>
            Obtains the documentation file for the specified assembly
            </summary>
            <param name="assembly">The assembly to find the XML document for</param>
            <returns>The XML document</returns>
            <remarks>This version uses a cache to preserve the assemblies, so that 
            the XML file is not loaded and parsed on every single lookup</remarks>
        </member>
        <member name="M:KubeUI.Core.DocumenationExtensions.XmlFromAssemblyNonCached(System.Reflection.Assembly)">
            <summary>
            Loads and parses the documentation file for the specified assembly
            </summary>
            <param name="assembly">The assembly to find the XML document for</param>
            <returns>The XML document</returns>
        </member>
        <member name="M:KubeUI.Core.DictionaryExtensions.ChangeKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)">
            <summary>
            Renames a key
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="oldKey"></param>
            <param name="newKey"></param>
            <returns></returns>
        </member>
        <member name="T:KubeUI.Core.JsonPropertyTypeInspector">
            <summary>
            Applies the Yaml* attributes to another <see cref="T:YamlDotNet.Serialization.ITypeInspector"/>.
            </summary>
        </member>
        <member name="T:KubeUI.MetadataTypeAttribute">
            <summary>
            Used for associating a metadata class with the entity class.
            </summary>
        </member>
        <member name="P:KubeUI.K8sBase.ApiVersion">
            <summary>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources</summary>
        </member>
        <member name="P:KubeUI.K8sBase.Kind">
            <summary>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="T:KubeUI.Schema.DaemonSet">
            <summary>DaemonSet represents the configuration of a daemon set.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSet.ApiVersion">
            <summary>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSet.Kind">
            <summary>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSet.Metadata">
            <summary>Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSet.Spec">
            <summary>The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSet.Status">
            <summary>The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</summary>
        </member>
        <member name="T:KubeUI.Schema.DaemonSetCondition">
            <summary>DaemonSetCondition describes the state of a DaemonSet at a certain point.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetCondition.LastTransitionTime">
            <summary>Last time the condition transitioned from one status to another.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetCondition.Message">
            <summary>A human readable message indicating details about the transition.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetCondition.Reason">
            <summary>The reason for the condition's last transition.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetCondition.Status">
            <summary>Status of the condition, one of True, False, Unknown.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetCondition.Type">
            <summary>Type of DaemonSet condition.</summary>
        </member>
        <member name="T:KubeUI.Schema.DaemonSetSpec">
            <summary>DaemonSetSpec is the specification of a daemon set.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetSpec.MinReadySeconds">
            <summary>The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetSpec.RevisionHistoryLimit">
            <summary>The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetSpec.Selector">
            <summary>A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetSpec.Template">
            <summary>An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetSpec.UpdateStrategy">
            <summary>An update strategy to replace existing DaemonSet pods with new pods.</summary>
        </member>
        <member name="T:KubeUI.Schema.DaemonSetStatus">
            <summary>DaemonSetStatus represents the current status of a daemon set.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetStatus.CollisionCount">
            <summary>Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetStatus.Conditions">
            <summary>Represents the latest available observations of a DaemonSet's current state.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetStatus.CurrentNumberScheduled">
            <summary>The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetStatus.DesiredNumberScheduled">
            <summary>The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetStatus.NumberAvailable">
            <summary>The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetStatus.NumberMisscheduled">
            <summary>The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetStatus.NumberReady">
            <summary>The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetStatus.NumberUnavailable">
            <summary>The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetStatus.ObservedGeneration">
            <summary>The most recent generation observed by the daemon set controller.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetStatus.UpdatedNumberScheduled">
            <summary>The total number of nodes that are running updated daemon pod</summary>
        </member>
        <member name="T:KubeUI.Schema.DaemonSetUpdateStrategy">
            <summary>DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetUpdateStrategy.RollingUpdate">
            <summary>Rolling update config params. Present only if type = "RollingUpdate".</summary>
        </member>
        <member name="P:KubeUI.Schema.DaemonSetUpdateStrategy.Type">
            <summary>Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.</summary>
        </member>
        <member name="T:KubeUI.Schema.Deployment">
            <summary>Deployment enables declarative updates for Pods and ReplicaSets.</summary>
        </member>
        <member name="P:KubeUI.Schema.Deployment.ApiVersion">
            <summary>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources</summary>
        </member>
        <member name="P:KubeUI.Schema.Deployment.Kind">
            <summary>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.Deployment.Metadata">
            <summary>Standard object metadata.</summary>
        </member>
        <member name="P:KubeUI.Schema.Deployment.Spec">
            <summary>Specification of the desired behavior of the Deployment.</summary>
        </member>
        <member name="P:KubeUI.Schema.Deployment.Status">
            <summary>Most recently observed status of the Deployment.</summary>
        </member>
        <member name="T:KubeUI.Schema.DeploymentCondition">
            <summary>DeploymentCondition describes the state of a deployment at a certain point.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentCondition.LastTransitionTime">
            <summary>Last time the condition transitioned from one status to another.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentCondition.LastUpdateTime">
            <summary>The last time this condition was updated.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentCondition.Message">
            <summary>A human readable message indicating details about the transition.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentCondition.Reason">
            <summary>The reason for the condition's last transition.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentCondition.Status">
            <summary>Status of the condition, one of True, False, Unknown.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentCondition.Type">
            <summary>Type of deployment condition.</summary>
        </member>
        <member name="T:KubeUI.Schema.DeploymentSpec">
            <summary>DeploymentSpec is the specification of the desired behavior of the Deployment.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentSpec.MinReadySeconds">
            <summary>Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentSpec.Paused">
            <summary>Indicates that the deployment is paused.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentSpec.ProgressDeadlineSeconds">
            <summary>The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentSpec.Replicas">
            <summary>Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentSpec.RevisionHistoryLimit">
            <summary>The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentSpec.Selector">
            <summary>Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentSpec.Strategy">
            <summary>The deployment strategy to use to replace existing pods with new ones.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentSpec.Template">
            <summary>Template describes the pods that will be created.</summary>
        </member>
        <member name="T:KubeUI.Schema.DeploymentStatus">
            <summary>DeploymentStatus is the most recently observed status of the Deployment.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentStatus.AvailableReplicas">
            <summary>Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentStatus.CollisionCount">
            <summary>Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentStatus.Conditions">
            <summary>Represents the latest available observations of a deployment's current state.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentStatus.ObservedGeneration">
            <summary>The generation observed by the deployment controller.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentStatus.ReadyReplicas">
            <summary>Total number of ready pods targeted by this deployment.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentStatus.Replicas">
            <summary>Total number of non-terminated pods targeted by this deployment (their labels match the selector).</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentStatus.UnavailableReplicas">
            <summary>Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentStatus.UpdatedReplicas">
            <summary>Total number of non-terminated pods targeted by this deployment that have the desired template spec.</summary>
        </member>
        <member name="T:KubeUI.Schema.DeploymentStrategy">
            <summary>DeploymentStrategy describes how to replace existing pods with new ones.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentStrategy.RollingUpdate">
            <summary>Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.</summary>
        </member>
        <member name="P:KubeUI.Schema.DeploymentStrategy.Type">
            <summary>Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.</summary>
        </member>
        <member name="T:KubeUI.Schema.RollingUpdateDaemonSet">
            <summary>Spec to control the desired behavior of daemon set rolling update.</summary>
        </member>
        <member name="P:KubeUI.Schema.RollingUpdateDaemonSet.MaxUnavailable">
            <summary>The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.</summary>
        </member>
        <member name="T:KubeUI.Schema.RollingUpdateDeployment">
            <summary>Spec to control the desired behavior of rolling update.</summary>
        </member>
        <member name="P:KubeUI.Schema.RollingUpdateDeployment.MaxSurge">
            <summary>The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.</summary>
        </member>
        <member name="P:KubeUI.Schema.RollingUpdateDeployment.MaxUnavailable">
            <summary>The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.</summary>
        </member>
        <member name="T:KubeUI.Schema.RollingUpdateStatefulSetStrategy">
            <summary>RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.</summary>
        </member>
        <member name="P:KubeUI.Schema.RollingUpdateStatefulSetStrategy.Partition">
            <summary>Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.</summary>
        </member>
        <member name="T:KubeUI.Schema.StatefulSet">
            <summary>StatefulSet represents a set of pods with consistent identities. Identities are defined as:
             - Network: A single stable DNS and hostname.
             - Storage: As many VolumeClaims as requested.
            The StatefulSet guarantees that a given network identity will always map to the same storage identity.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSet.ApiVersion">
            <summary>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSet.Kind">
            <summary>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSet.Spec">
            <summary>Spec defines the desired identities of pods in this set.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSet.Status">
            <summary>Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.</summary>
        </member>
        <member name="T:KubeUI.Schema.StatefulSetCondition">
            <summary>StatefulSetCondition describes the state of a statefulset at a certain point.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetCondition.LastTransitionTime">
            <summary>Last time the condition transitioned from one status to another.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetCondition.Message">
            <summary>A human readable message indicating details about the transition.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetCondition.Reason">
            <summary>The reason for the condition's last transition.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetCondition.Status">
            <summary>Status of the condition, one of True, False, Unknown.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetCondition.Type">
            <summary>Type of statefulset condition.</summary>
        </member>
        <member name="T:KubeUI.Schema.StatefulSetSpec">
            <summary>A StatefulSetSpec is the specification of a StatefulSet.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetSpec.PodManagementPolicy">
            <summary>podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetSpec.Replicas">
            <summary>replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetSpec.RevisionHistoryLimit">
            <summary>revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetSpec.Selector">
            <summary>selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetSpec.ServiceName">
            <summary>serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetSpec.Template">
            <summary>template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetSpec.UpdateStrategy">
            <summary>updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetSpec.VolumeClaimTemplates">
            <summary>volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.</summary>
        </member>
        <member name="T:KubeUI.Schema.StatefulSetStatus">
            <summary>StatefulSetStatus represents the current state of a StatefulSet.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetStatus.CollisionCount">
            <summary>collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetStatus.Conditions">
            <summary>Represents the latest available observations of a statefulset's current state.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetStatus.CurrentReplicas">
            <summary>currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetStatus.CurrentRevision">
            <summary>currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetStatus.ObservedGeneration">
            <summary>observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetStatus.ReadyReplicas">
            <summary>readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetStatus.Replicas">
            <summary>replicas is the number of Pods created by the StatefulSet controller.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetStatus.UpdateRevision">
            <summary>updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetStatus.UpdatedReplicas">
            <summary>updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.</summary>
        </member>
        <member name="T:KubeUI.Schema.StatefulSetUpdateStrategy">
            <summary>StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetUpdateStrategy.RollingUpdate">
            <summary>RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatefulSetUpdateStrategy.Type">
            <summary>Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.</summary>
        </member>
        <member name="T:KubeUI.Schema.JobSpec">
            <summary>JobSpec describes how the job execution will look like.</summary>
        </member>
        <member name="P:KubeUI.Schema.JobSpec.ActiveDeadlineSeconds">
            <summary>Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer</summary>
        </member>
        <member name="P:KubeUI.Schema.JobSpec.BackoffLimit">
            <summary>Specifies the number of retries before marking this job failed. Defaults to 6</summary>
        </member>
        <member name="P:KubeUI.Schema.JobSpec.Completions">
            <summary>Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/</summary>
        </member>
        <member name="P:KubeUI.Schema.JobSpec.ManualSelector">
            <summary>manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector</summary>
        </member>
        <member name="P:KubeUI.Schema.JobSpec.Parallelism">
            <summary>Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) &lt; .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/</summary>
        </member>
        <member name="P:KubeUI.Schema.JobSpec.Selector">
            <summary>A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors</summary>
        </member>
        <member name="P:KubeUI.Schema.JobSpec.Template">
            <summary>Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/</summary>
        </member>
        <member name="P:KubeUI.Schema.JobSpec.TtlSecondsAfterFinished">
            <summary>ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature.</summary>
        </member>
        <member name="T:KubeUI.Schema.CronJob">
            <summary>CronJob represents the configuration of a single cron job.</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJob.ApiVersion">
            <summary>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJob.Kind">
            <summary>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJob.Metadata">
            <summary>Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJob.Spec">
            <summary>Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJob.Status">
            <summary>Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</summary>
        </member>
        <member name="T:KubeUI.Schema.CronJobSpec">
            <summary>CronJobSpec describes how the job execution will look like and when it will actually run.</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJobSpec.ConcurrencyPolicy">
            <summary>Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJobSpec.FailedJobsHistoryLimit">
            <summary>The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJobSpec.JobTemplate">
            <summary>Specifies the job that will be created when executing a CronJob.</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJobSpec.Schedule">
            <summary>The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJobSpec.StartingDeadlineSeconds">
            <summary>Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJobSpec.SuccessfulJobsHistoryLimit">
            <summary>The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3.</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJobSpec.Suspend">
            <summary>This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.</summary>
        </member>
        <member name="T:KubeUI.Schema.CronJobStatus">
            <summary>CronJobStatus represents the current state of a cron job.</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJobStatus.Active">
            <summary>A list of pointers to currently running jobs.</summary>
        </member>
        <member name="P:KubeUI.Schema.CronJobStatus.LastScheduleTime">
            <summary>Information when was the last time the job was successfully scheduled.</summary>
        </member>
        <member name="T:KubeUI.Schema.JobTemplateSpec">
            <summary>JobTemplateSpec describes the data a Job should have when created from a template</summary>
        </member>
        <member name="P:KubeUI.Schema.JobTemplateSpec.Metadata">
            <summary>Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</summary>
        </member>
        <member name="P:KubeUI.Schema.JobTemplateSpec.Spec">
            <summary>Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</summary>
        </member>
        <member name="T:KubeUI.Schema.AWSElasticBlockStoreVolumeSource">
            <summary>Represents a Persistent Disk resource in AWS.
            
            An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.AWSElasticBlockStoreVolumeSource.FsType">
            <summary>Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore</summary>
        </member>
        <member name="P:KubeUI.Schema.AWSElasticBlockStoreVolumeSource.Partition">
            <summary>The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).</summary>
        </member>
        <member name="P:KubeUI.Schema.AWSElasticBlockStoreVolumeSource.ReadOnly">
            <summary>Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore</summary>
        </member>
        <member name="P:KubeUI.Schema.AWSElasticBlockStoreVolumeSource.VolumeID">
            <summary>Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore</summary>
        </member>
        <member name="T:KubeUI.Schema.Affinity">
            <summary>Affinity is a group of affinity scheduling rules.</summary>
        </member>
        <member name="P:KubeUI.Schema.Affinity.NodeAffinity">
            <summary>Describes node affinity scheduling rules for the pod.</summary>
        </member>
        <member name="P:KubeUI.Schema.Affinity.PodAffinity">
            <summary>Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).</summary>
        </member>
        <member name="P:KubeUI.Schema.Affinity.PodAntiAffinity">
            <summary>Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).</summary>
        </member>
        <member name="T:KubeUI.Schema.AzureDiskVolumeSource">
            <summary>AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.</summary>
        </member>
        <member name="P:KubeUI.Schema.AzureDiskVolumeSource.CachingMode">
            <summary>Host Caching mode: None, Read Only, Read Write.</summary>
        </member>
        <member name="P:KubeUI.Schema.AzureDiskVolumeSource.DiskName">
            <summary>The Name of the data disk in the blob storage</summary>
        </member>
        <member name="P:KubeUI.Schema.AzureDiskVolumeSource.DiskURI">
            <summary>The URI the data disk in the blob storage</summary>
        </member>
        <member name="P:KubeUI.Schema.AzureDiskVolumeSource.FsType">
            <summary>Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.</summary>
        </member>
        <member name="P:KubeUI.Schema.AzureDiskVolumeSource.Kind">
            <summary>Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared</summary>
        </member>
        <member name="P:KubeUI.Schema.AzureDiskVolumeSource.ReadOnly">
            <summary>Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</summary>
        </member>
        <member name="T:KubeUI.Schema.AzureFileVolumeSource">
            <summary>AzureFile represents an Azure File Service mount on the host and bind mount to the pod.</summary>
        </member>
        <member name="P:KubeUI.Schema.AzureFileVolumeSource.ReadOnly">
            <summary>Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</summary>
        </member>
        <member name="P:KubeUI.Schema.AzureFileVolumeSource.SecretName">
            <summary>the name of secret that contains Azure Storage Account Name and Key</summary>
        </member>
        <member name="P:KubeUI.Schema.AzureFileVolumeSource.ShareName">
            <summary>Share Name</summary>
        </member>
        <member name="T:KubeUI.Schema.CSIVolumeSource">
            <summary>Represents a source location of a volume to mount, managed by an external CSI driver</summary>
        </member>
        <member name="P:KubeUI.Schema.CSIVolumeSource.Driver">
            <summary>Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.</summary>
        </member>
        <member name="P:KubeUI.Schema.CSIVolumeSource.FsType">
            <summary>Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.</summary>
        </member>
        <member name="P:KubeUI.Schema.CSIVolumeSource.NodePublishSecretRef">
            <summary>NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.</summary>
        </member>
        <member name="P:KubeUI.Schema.CSIVolumeSource.ReadOnly">
            <summary>Specifies a read-only configuration for the volume. Defaults to false (read/write).</summary>
        </member>
        <member name="P:KubeUI.Schema.CSIVolumeSource.VolumeAttributes">
            <summary>VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.</summary>
        </member>
        <member name="T:KubeUI.Schema.Capabilities">
            <summary>Adds and removes POSIX capabilities from running containers.</summary>
        </member>
        <member name="P:KubeUI.Schema.Capabilities.Add">
            <summary>Added capabilities</summary>
        </member>
        <member name="P:KubeUI.Schema.Capabilities.Drop">
            <summary>Removed capabilities</summary>
        </member>
        <member name="T:KubeUI.Schema.CephFSVolumeSource">
            <summary>Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.CephFSVolumeSource.Monitors">
            <summary>Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it</summary>
        </member>
        <member name="P:KubeUI.Schema.CephFSVolumeSource.Path">
            <summary>Optional: Used as the mounted root, rather than the full Ceph tree, default is /</summary>
        </member>
        <member name="P:KubeUI.Schema.CephFSVolumeSource.ReadOnly">
            <summary>Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it</summary>
        </member>
        <member name="P:KubeUI.Schema.CephFSVolumeSource.SecretFile">
            <summary>Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it</summary>
        </member>
        <member name="P:KubeUI.Schema.CephFSVolumeSource.SecretRef">
            <summary>Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it</summary>
        </member>
        <member name="P:KubeUI.Schema.CephFSVolumeSource.User">
            <summary>Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it</summary>
        </member>
        <member name="T:KubeUI.Schema.CinderVolumeSource">
            <summary>Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.CinderVolumeSource.FsType">
            <summary>Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md</summary>
        </member>
        <member name="P:KubeUI.Schema.CinderVolumeSource.ReadOnly">
            <summary>Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md</summary>
        </member>
        <member name="P:KubeUI.Schema.CinderVolumeSource.SecretRef">
            <summary>Optional: points to a secret object containing parameters used to connect to OpenStack.</summary>
        </member>
        <member name="P:KubeUI.Schema.CinderVolumeSource.VolumeID">
            <summary>volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md</summary>
        </member>
        <member name="T:KubeUI.Schema.ClientIPConfig">
            <summary>ClientIPConfig represents the configurations of Client IP based session affinity.</summary>
        </member>
        <member name="P:KubeUI.Schema.ClientIPConfig.TimeoutSeconds">
            <summary>timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be &gt;0 &amp;&amp; &lt;=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).</summary>
        </member>
        <member name="T:KubeUI.Schema.ConfigMap">
            <summary>ConfigMap holds configuration data for pods to consume.</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMap.ApiVersion">
            <summary>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMap.BinaryData">
            <summary>BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMap.Data">
            <summary>Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMap.Kind">
            <summary>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMap.Metadata">
            <summary>Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</summary>
        </member>
        <member name="T:KubeUI.Schema.ConfigMapEnvSource">
            <summary>ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
            
            The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMapEnvSource.Name">
            <summary>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMapEnvSource.Optional">
            <summary>Specify whether the ConfigMap must be defined</summary>
        </member>
        <member name="T:KubeUI.Schema.ConfigMapKeySelector">
            <summary>Selects a key from a ConfigMap.</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMapKeySelector.Key">
            <summary>The key to select.</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMapKeySelector.Name">
            <summary>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMapKeySelector.Optional">
            <summary>Specify whether the ConfigMap or it's key must be defined</summary>
        </member>
        <member name="T:KubeUI.Schema.ConfigMapProjection">
            <summary>Adapts a ConfigMap into a projected volume.
            
            The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMapProjection.Items">
            <summary>If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMapProjection.Name">
            <summary>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMapProjection.Optional">
            <summary>Specify whether the ConfigMap or it's keys must be defined</summary>
        </member>
        <member name="T:KubeUI.Schema.ConfigMapVolumeSource">
            <summary>Adapts a ConfigMap into a volume.
            
            The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMapVolumeSource.DefaultMode">
            <summary>Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMapVolumeSource.Items">
            <summary>If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMapVolumeSource.Name">
            <summary>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</summary>
        </member>
        <member name="P:KubeUI.Schema.ConfigMapVolumeSource.Optional">
            <summary>Specify whether the ConfigMap or it's keys must be defined</summary>
        </member>
        <member name="T:KubeUI.Schema.Container">
            <summary>A single application container that you want to run within a pod.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.Args">
            <summary>Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.Command">
            <summary>Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.Env">
            <summary>List of environment variables to set in the container. Cannot be updated.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.EnvFrom">
            <summary>List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.Image">
            <summary>Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.ImagePullPolicy">
            <summary>Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.Lifecycle">
            <summary>Actions that the management system should take in response to container lifecycle events. Cannot be updated.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.LivenessProbe">
            <summary>Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.Name">
            <summary>Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.Ports">
            <summary>List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.ReadinessProbe">
            <summary>Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.Resources">
            <summary>Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.SecurityContext">
            <summary>Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.Stdin">
            <summary>Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.StdinOnce">
            <summary>Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.TerminationMessagePath">
            <summary>Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.TerminationMessagePolicy">
            <summary>Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.Tty">
            <summary>Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.VolumeDevices">
            <summary>volumeDevices is the list of block devices to be used by the container. This is a beta feature.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.VolumeMounts">
            <summary>Pod volumes to mount into the container's filesystem. Cannot be updated.</summary>
        </member>
        <member name="P:KubeUI.Schema.Container.WorkingDir">
            <summary>Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.</summary>
        </member>
        <member name="T:KubeUI.Schema.ContainerPort">
            <summary>ContainerPort represents a network port in a single container.</summary>
        </member>
        <member name="P:KubeUI.Schema.ContainerPort.ContainerPort1">
            <summary>Number of port to expose on the pod's IP address. This must be a valid port number, 0 &lt; x &lt; 65536.</summary>
        </member>
        <member name="P:KubeUI.Schema.ContainerPort.HostIP">
            <summary>What host IP to bind the external port to.</summary>
        </member>
        <member name="P:KubeUI.Schema.ContainerPort.HostPort">
            <summary>Number of port to expose on the host. If specified, this must be a valid port number, 0 &lt; x &lt; 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.</summary>
        </member>
        <member name="P:KubeUI.Schema.ContainerPort.Name">
            <summary>If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.</summary>
        </member>
        <member name="P:KubeUI.Schema.ContainerPort.Protocol">
            <summary>Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".</summary>
        </member>
        <member name="T:KubeUI.Schema.DownwardAPIProjection">
            <summary>Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.</summary>
        </member>
        <member name="P:KubeUI.Schema.DownwardAPIProjection.Items">
            <summary>Items is a list of DownwardAPIVolume file</summary>
        </member>
        <member name="T:KubeUI.Schema.DownwardAPIVolumeFile">
            <summary>DownwardAPIVolumeFile represents information to create the file containing the pod field</summary>
        </member>
        <member name="P:KubeUI.Schema.DownwardAPIVolumeFile.FieldRef">
            <summary>Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.</summary>
        </member>
        <member name="P:KubeUI.Schema.DownwardAPIVolumeFile.Mode">
            <summary>Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</summary>
        </member>
        <member name="P:KubeUI.Schema.DownwardAPIVolumeFile.Path">
            <summary>Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'</summary>
        </member>
        <member name="P:KubeUI.Schema.DownwardAPIVolumeFile.ResourceFieldRef">
            <summary>Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.</summary>
        </member>
        <member name="T:KubeUI.Schema.DownwardAPIVolumeSource">
            <summary>DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.DownwardAPIVolumeSource.DefaultMode">
            <summary>Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</summary>
        </member>
        <member name="P:KubeUI.Schema.DownwardAPIVolumeSource.Items">
            <summary>Items is a list of downward API volume file</summary>
        </member>
        <member name="T:KubeUI.Schema.EmptyDirVolumeSource">
            <summary>Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.EmptyDirVolumeSource.Medium">
            <summary>What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir</summary>
        </member>
        <member name="P:KubeUI.Schema.EmptyDirVolumeSource.SizeLimit">
            <summary>Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir</summary>
        </member>
        <member name="T:KubeUI.Schema.EnvFromSource">
            <summary>EnvFromSource represents the source of a set of ConfigMaps</summary>
        </member>
        <member name="P:KubeUI.Schema.EnvFromSource.ConfigMapRef">
            <summary>The ConfigMap to select from</summary>
        </member>
        <member name="P:KubeUI.Schema.EnvFromSource.Prefix">
            <summary>An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.</summary>
        </member>
        <member name="P:KubeUI.Schema.EnvFromSource.SecretRef">
            <summary>The Secret to select from</summary>
        </member>
        <member name="T:KubeUI.Schema.EnvVar">
            <summary>EnvVar represents an environment variable present in a Container.</summary>
        </member>
        <member name="P:KubeUI.Schema.EnvVar.Name">
            <summary>Name of the environment variable. Must be a C_IDENTIFIER.</summary>
        </member>
        <member name="P:KubeUI.Schema.EnvVar.Value">
            <summary>Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".</summary>
        </member>
        <member name="P:KubeUI.Schema.EnvVar.ValueFrom">
            <summary>Source for the environment variable's value. Cannot be used if value is not empty.</summary>
        </member>
        <member name="T:KubeUI.Schema.EnvVarSource">
            <summary>EnvVarSource represents a source for the value of an EnvVar.</summary>
        </member>
        <member name="P:KubeUI.Schema.EnvVarSource.ConfigMapKeyRef">
            <summary>Selects a key of a ConfigMap.</summary>
        </member>
        <member name="P:KubeUI.Schema.EnvVarSource.FieldRef">
            <summary>Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.</summary>
        </member>
        <member name="P:KubeUI.Schema.EnvVarSource.ResourceFieldRef">
            <summary>Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.</summary>
        </member>
        <member name="P:KubeUI.Schema.EnvVarSource.SecretKeyRef">
            <summary>Selects a key of a secret in the pod's namespace</summary>
        </member>
        <member name="T:KubeUI.Schema.ExecAction">
            <summary>ExecAction describes a "run in container" action.</summary>
        </member>
        <member name="P:KubeUI.Schema.ExecAction.Command">
            <summary>Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.</summary>
        </member>
        <member name="T:KubeUI.Schema.FCVolumeSource">
            <summary>Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.FCVolumeSource.FsType">
            <summary>Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.</summary>
        </member>
        <member name="P:KubeUI.Schema.FCVolumeSource.Lun">
            <summary>Optional: FC target lun number</summary>
        </member>
        <member name="P:KubeUI.Schema.FCVolumeSource.ReadOnly">
            <summary>Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</summary>
        </member>
        <member name="P:KubeUI.Schema.FCVolumeSource.TargetWWNs">
            <summary>Optional: FC target worldwide names (WWNs)</summary>
        </member>
        <member name="P:KubeUI.Schema.FCVolumeSource.Wwids">
            <summary>Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.</summary>
        </member>
        <member name="T:KubeUI.Schema.FlexVolumeSource">
            <summary>FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.</summary>
        </member>
        <member name="P:KubeUI.Schema.FlexVolumeSource.Driver">
            <summary>Driver is the name of the driver to use for this volume.</summary>
        </member>
        <member name="P:KubeUI.Schema.FlexVolumeSource.FsType">
            <summary>Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.</summary>
        </member>
        <member name="P:KubeUI.Schema.FlexVolumeSource.Options">
            <summary>Optional: Extra command options if any.</summary>
        </member>
        <member name="P:KubeUI.Schema.FlexVolumeSource.ReadOnly">
            <summary>Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</summary>
        </member>
        <member name="P:KubeUI.Schema.FlexVolumeSource.SecretRef">
            <summary>Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.</summary>
        </member>
        <member name="T:KubeUI.Schema.FlockerVolumeSource">
            <summary>Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.FlockerVolumeSource.DatasetName">
            <summary>Name of the dataset stored as metadata -&gt; name on the dataset for Flocker should be considered as deprecated</summary>
        </member>
        <member name="P:KubeUI.Schema.FlockerVolumeSource.DatasetUUID">
            <summary>UUID of the dataset. This is unique identifier of a Flocker dataset</summary>
        </member>
        <member name="T:KubeUI.Schema.GCEPersistentDiskVolumeSource">
            <summary>Represents a Persistent Disk resource in Google Compute Engine.
            
            A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.GCEPersistentDiskVolumeSource.FsType">
            <summary>Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk</summary>
        </member>
        <member name="P:KubeUI.Schema.GCEPersistentDiskVolumeSource.Partition">
            <summary>The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk</summary>
        </member>
        <member name="P:KubeUI.Schema.GCEPersistentDiskVolumeSource.PdName">
            <summary>Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk</summary>
        </member>
        <member name="P:KubeUI.Schema.GCEPersistentDiskVolumeSource.ReadOnly">
            <summary>ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk</summary>
        </member>
        <member name="T:KubeUI.Schema.GitRepoVolumeSource">
            <summary>Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
            
            DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.</summary>
        </member>
        <member name="P:KubeUI.Schema.GitRepoVolumeSource.Directory">
            <summary>Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.</summary>
        </member>
        <member name="P:KubeUI.Schema.GitRepoVolumeSource.Repository">
            <summary>Repository URL</summary>
        </member>
        <member name="P:KubeUI.Schema.GitRepoVolumeSource.Revision">
            <summary>Commit hash for the specified revision.</summary>
        </member>
        <member name="T:KubeUI.Schema.GlusterfsVolumeSource">
            <summary>Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.GlusterfsVolumeSource.Endpoints">
            <summary>EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod</summary>
        </member>
        <member name="P:KubeUI.Schema.GlusterfsVolumeSource.Path">
            <summary>Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod</summary>
        </member>
        <member name="P:KubeUI.Schema.GlusterfsVolumeSource.ReadOnly">
            <summary>ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod</summary>
        </member>
        <member name="T:KubeUI.Schema.HTTPGetAction">
            <summary>HTTPGetAction describes an action based on HTTP Get requests.</summary>
        </member>
        <member name="P:KubeUI.Schema.HTTPGetAction.Host">
            <summary>Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.</summary>
        </member>
        <member name="P:KubeUI.Schema.HTTPGetAction.HttpHeaders">
            <summary>Custom headers to set in the request. HTTP allows repeated headers.</summary>
        </member>
        <member name="P:KubeUI.Schema.HTTPGetAction.Path">
            <summary>Path to access on the HTTP server.</summary>
        </member>
        <member name="P:KubeUI.Schema.HTTPGetAction.Port">
            <summary>Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.</summary>
        </member>
        <member name="P:KubeUI.Schema.HTTPGetAction.Scheme">
            <summary>Scheme to use for connecting to the host. Defaults to HTTP.</summary>
        </member>
        <member name="T:KubeUI.Schema.HTTPHeader">
            <summary>HTTPHeader describes a custom header to be used in HTTP probes</summary>
        </member>
        <member name="P:KubeUI.Schema.HTTPHeader.Name">
            <summary>The header field name</summary>
        </member>
        <member name="P:KubeUI.Schema.HTTPHeader.Value">
            <summary>The header field value</summary>
        </member>
        <member name="T:KubeUI.Schema.Handler">
            <summary>Handler defines a specific action that should be taken</summary>
        </member>
        <member name="P:KubeUI.Schema.Handler.Exec">
            <summary>One and only one of the following should be specified. Exec specifies the action to take.</summary>
        </member>
        <member name="P:KubeUI.Schema.Handler.HttpGet">
            <summary>HTTPGet specifies the http request to perform.</summary>
        </member>
        <member name="P:KubeUI.Schema.Handler.TcpSocket">
            <summary>TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported</summary>
        </member>
        <member name="T:KubeUI.Schema.HostAlias">
            <summary>HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.</summary>
        </member>
        <member name="P:KubeUI.Schema.HostAlias.Hostnames">
            <summary>Hostnames for the above IP address.</summary>
        </member>
        <member name="P:KubeUI.Schema.HostAlias.Ip">
            <summary>IP address of the host file entry.</summary>
        </member>
        <member name="T:KubeUI.Schema.HostPathVolumeSource">
            <summary>Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.HostPathVolumeSource.Path">
            <summary>Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath</summary>
        </member>
        <member name="P:KubeUI.Schema.HostPathVolumeSource.Type">
            <summary>Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath</summary>
        </member>
        <member name="T:KubeUI.Schema.ISCSIVolumeSource">
            <summary>Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.ISCSIVolumeSource.ChapAuthDiscovery">
            <summary>whether support iSCSI Discovery CHAP authentication</summary>
        </member>
        <member name="P:KubeUI.Schema.ISCSIVolumeSource.ChapAuthSession">
            <summary>whether support iSCSI Session CHAP authentication</summary>
        </member>
        <member name="P:KubeUI.Schema.ISCSIVolumeSource.FsType">
            <summary>Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi</summary>
        </member>
        <member name="P:KubeUI.Schema.ISCSIVolumeSource.InitiatorName">
            <summary>Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume name&gt; will be created for the connection.</summary>
        </member>
        <member name="P:KubeUI.Schema.ISCSIVolumeSource.Iqn">
            <summary>Target iSCSI Qualified Name.</summary>
        </member>
        <member name="P:KubeUI.Schema.ISCSIVolumeSource.IscsiInterface">
            <summary>iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).</summary>
        </member>
        <member name="P:KubeUI.Schema.ISCSIVolumeSource.Lun">
            <summary>iSCSI Target Lun number.</summary>
        </member>
        <member name="P:KubeUI.Schema.ISCSIVolumeSource.Portals">
            <summary>iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).</summary>
        </member>
        <member name="P:KubeUI.Schema.ISCSIVolumeSource.ReadOnly">
            <summary>ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.</summary>
        </member>
        <member name="P:KubeUI.Schema.ISCSIVolumeSource.SecretRef">
            <summary>CHAP Secret for iSCSI target and initiator authentication</summary>
        </member>
        <member name="P:KubeUI.Schema.ISCSIVolumeSource.TargetPortal">
            <summary>iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).</summary>
        </member>
        <member name="T:KubeUI.Schema.KeyToPath">
            <summary>Maps a string key to a path within a volume.</summary>
        </member>
        <member name="P:KubeUI.Schema.KeyToPath.Key">
            <summary>The key to project.</summary>
        </member>
        <member name="P:KubeUI.Schema.KeyToPath.Mode">
            <summary>Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</summary>
        </member>
        <member name="P:KubeUI.Schema.KeyToPath.Path">
            <summary>The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.</summary>
        </member>
        <member name="T:KubeUI.Schema.Lifecycle">
            <summary>Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.</summary>
        </member>
        <member name="P:KubeUI.Schema.Lifecycle.PostStart">
            <summary>PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks</summary>
        </member>
        <member name="P:KubeUI.Schema.Lifecycle.PreStop">
            <summary>PreStop is called immediately before a container is terminated due to an API request or management event such as liveness probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks</summary>
        </member>
        <member name="T:KubeUI.Schema.LoadBalancerIngress">
            <summary>LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.</summary>
        </member>
        <member name="P:KubeUI.Schema.LoadBalancerIngress.Hostname">
            <summary>Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)</summary>
        </member>
        <member name="P:KubeUI.Schema.LoadBalancerIngress.Ip">
            <summary>IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)</summary>
        </member>
        <member name="T:KubeUI.Schema.LoadBalancerStatus">
            <summary>LoadBalancerStatus represents the status of a load-balancer.</summary>
        </member>
        <member name="P:KubeUI.Schema.LoadBalancerStatus.Ingress">
            <summary>Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.</summary>
        </member>
        <member name="T:KubeUI.Schema.LocalObjectReference">
            <summary>LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.</summary>
        </member>
        <member name="P:KubeUI.Schema.LocalObjectReference.Name">
            <summary>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</summary>
        </member>
        <member name="T:KubeUI.Schema.NFSVolumeSource">
            <summary>Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.NFSVolumeSource.Path">
            <summary>Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs</summary>
        </member>
        <member name="P:KubeUI.Schema.NFSVolumeSource.ReadOnly">
            <summary>ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs</summary>
        </member>
        <member name="P:KubeUI.Schema.NFSVolumeSource.Server">
            <summary>Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs</summary>
        </member>
        <member name="T:KubeUI.Schema.NodeAffinity">
            <summary>Node affinity is a group of node affinity scheduling rules.</summary>
        </member>
        <member name="P:KubeUI.Schema.NodeAffinity.PreferredDuringSchedulingIgnoredDuringExecution">
            <summary>The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.</summary>
        </member>
        <member name="P:KubeUI.Schema.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution">
            <summary>If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.</summary>
        </member>
        <member name="T:KubeUI.Schema.NodeSelector">
            <summary>A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.</summary>
        </member>
        <member name="P:KubeUI.Schema.NodeSelector.NodeSelectorTerms">
            <summary>Required. A list of node selector terms. The terms are ORed.</summary>
        </member>
        <member name="T:KubeUI.Schema.NodeSelectorRequirement">
            <summary>A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.</summary>
        </member>
        <member name="P:KubeUI.Schema.NodeSelectorRequirement.Key">
            <summary>The label key that the selector applies to.</summary>
        </member>
        <member name="P:KubeUI.Schema.NodeSelectorRequirement.Operator">
            <summary>Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.</summary>
        </member>
        <member name="P:KubeUI.Schema.NodeSelectorRequirement.Values">
            <summary>An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.</summary>
        </member>
        <member name="T:KubeUI.Schema.NodeSelectorTerm">
            <summary>A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.</summary>
        </member>
        <member name="P:KubeUI.Schema.NodeSelectorTerm.MatchExpressions">
            <summary>A list of node selector requirements by node's labels.</summary>
        </member>
        <member name="P:KubeUI.Schema.NodeSelectorTerm.MatchFields">
            <summary>A list of node selector requirements by node's fields.</summary>
        </member>
        <member name="T:KubeUI.Schema.ObjectFieldSelector">
            <summary>ObjectFieldSelector selects an APIVersioned field of an object.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectFieldSelector.ApiVersion">
            <summary>Version of the schema the FieldPath is written in terms of, defaults to "v1".</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectFieldSelector.FieldPath">
            <summary>Path of the field to select in the specified API version.</summary>
        </member>
        <member name="T:KubeUI.Schema.ObjectReference">
            <summary>ObjectReference contains enough information to let you inspect or modify the referred object.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectReference.ApiVersion">
            <summary>API version of the referent.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectReference.FieldPath">
            <summary>If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectReference.Kind">
            <summary>Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectReference.Name">
            <summary>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectReference.Namespace">
            <summary>Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectReference.ResourceVersion">
            <summary>Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectReference.Uid">
            <summary>UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids</summary>
        </member>
        <member name="T:KubeUI.Schema.PersistentVolumeClaim">
            <summary>PersistentVolumeClaim is a user's request for and claim to a persistent volume</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaim.ApiVersion">
            <summary>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaim.Kind">
            <summary>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaim.Metadata">
            <summary>Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaim.Spec">
            <summary>Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaim.Status">
            <summary>Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims</summary>
        </member>
        <member name="T:KubeUI.Schema.PersistentVolumeClaimCondition">
            <summary>PersistentVolumeClaimCondition contails details about state of pvc</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimCondition.LastProbeTime">
            <summary>Last time we probed the condition.</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimCondition.LastTransitionTime">
            <summary>Last time the condition transitioned from one status to another.</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimCondition.Message">
            <summary>Human-readable message indicating details about last transition.</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimCondition.Reason">
            <summary>Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.</summary>
        </member>
        <member name="T:KubeUI.Schema.PersistentVolumeClaimSpec">
            <summary>PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimSpec.AccessModes">
            <summary>AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimSpec.DataSource">
            <summary>This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimSpec.Resources">
            <summary>Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimSpec.Selector">
            <summary>A label query over volumes to consider for binding.</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimSpec.StorageClassName">
            <summary>Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimSpec.VolumeMode">
            <summary>volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimSpec.VolumeName">
            <summary>VolumeName is the binding reference to the PersistentVolume backing this claim.</summary>
        </member>
        <member name="T:KubeUI.Schema.PersistentVolumeClaimStatus">
            <summary>PersistentVolumeClaimStatus is the current status of a persistent volume claim.</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimStatus.AccessModes">
            <summary>AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimStatus.Capacity">
            <summary>Represents the actual resources of the underlying volume.</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimStatus.Conditions">
            <summary>Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimStatus.Phase">
            <summary>Phase represents the current phase of PersistentVolumeClaim.</summary>
        </member>
        <member name="T:KubeUI.Schema.PersistentVolumeClaimVolumeSource">
            <summary>PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimVolumeSource.ClaimName">
            <summary>ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims</summary>
        </member>
        <member name="P:KubeUI.Schema.PersistentVolumeClaimVolumeSource.ReadOnly">
            <summary>Will force the ReadOnly setting in VolumeMounts. Default false.</summary>
        </member>
        <member name="T:KubeUI.Schema.PhotonPersistentDiskVolumeSource">
            <summary>Represents a Photon Controller persistent disk resource.</summary>
        </member>
        <member name="P:KubeUI.Schema.PhotonPersistentDiskVolumeSource.FsType">
            <summary>Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.</summary>
        </member>
        <member name="P:KubeUI.Schema.PhotonPersistentDiskVolumeSource.PdID">
            <summary>ID that identifies Photon Controller persistent disk</summary>
        </member>
        <member name="T:KubeUI.Schema.PodAffinity">
            <summary>Pod affinity is a group of inter pod affinity scheduling rules.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodAffinity.PreferredDuringSchedulingIgnoredDuringExecution">
            <summary>The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodAffinity.RequiredDuringSchedulingIgnoredDuringExecution">
            <summary>If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.</summary>
        </member>
        <member name="T:KubeUI.Schema.PodAffinityTerm">
            <summary>Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key &lt;topologyKey&gt; matches that of any node on which a pod of the set of pods is running</summary>
        </member>
        <member name="P:KubeUI.Schema.PodAffinityTerm.LabelSelector">
            <summary>A label query over a set of resources, in this case pods.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodAffinityTerm.Namespaces">
            <summary>namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"</summary>
        </member>
        <member name="P:KubeUI.Schema.PodAffinityTerm.TopologyKey">
            <summary>This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.</summary>
        </member>
        <member name="T:KubeUI.Schema.PodAntiAffinity">
            <summary>Pod anti affinity is a group of inter pod anti affinity scheduling rules.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodAntiAffinity.PreferredDuringSchedulingIgnoredDuringExecution">
            <summary>The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodAntiAffinity.RequiredDuringSchedulingIgnoredDuringExecution">
            <summary>If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.</summary>
        </member>
        <member name="T:KubeUI.Schema.PodDNSConfig">
            <summary>PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodDNSConfig.Nameservers">
            <summary>A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodDNSConfig.Options">
            <summary>A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodDNSConfig.Searches">
            <summary>A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.</summary>
        </member>
        <member name="T:KubeUI.Schema.PodDNSConfigOption">
            <summary>PodDNSConfigOption defines DNS resolver options of a pod.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodDNSConfigOption.Name">
            <summary>Required.</summary>
        </member>
        <member name="T:KubeUI.Schema.PodReadinessGate">
            <summary>PodReadinessGate contains the reference to a pod condition</summary>
        </member>
        <member name="P:KubeUI.Schema.PodReadinessGate.ConditionType">
            <summary>ConditionType refers to a condition in the pod's condition list with matching type.</summary>
        </member>
        <member name="T:KubeUI.Schema.PodSecurityContext">
            <summary>PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSecurityContext.FsGroup">
            <summary>A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
            
            1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
            
            If unset, the Kubelet will not modify the ownership and permissions of any volume.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSecurityContext.RunAsGroup">
            <summary>The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSecurityContext.RunAsNonRoot">
            <summary>Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSecurityContext.RunAsUser">
            <summary>The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSecurityContext.SeLinuxOptions">
            <summary>The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSecurityContext.SupplementalGroups">
            <summary>A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSecurityContext.Sysctls">
            <summary>Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.</summary>
        </member>
        <member name="T:KubeUI.Schema.PodSpec">
            <summary>PodSpec is a description of a pod.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.ActiveDeadlineSeconds">
            <summary>Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.Affinity">
            <summary>If specified, the pod's scheduling constraints</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.AutomountServiceAccountToken">
            <summary>AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.Containers">
            <summary>List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.DnsConfig">
            <summary>Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.DnsPolicy">
            <summary>Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.EnableServiceLinks">
            <summary>EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.HostAliases">
            <summary>HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.HostIPC">
            <summary>Use the host's ipc namespace. Optional: Default to false.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.HostNetwork">
            <summary>Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.HostPID">
            <summary>Use the host's pid namespace. Optional: Default to false.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.Hostname">
            <summary>Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.ImagePullSecrets">
            <summary>ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.InitContainers">
            <summary>List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.NodeName">
            <summary>NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.NodeSelector">
            <summary>NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.Priority">
            <summary>The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.PriorityClassName">
            <summary>If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.ReadinessGates">
            <summary>If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.RestartPolicy">
            <summary>Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.RuntimeClassName">
            <summary>RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is an alpha feature and may change in the future.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.SchedulerName">
            <summary>If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.SecurityContext">
            <summary>SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.ServiceAccount">
            <summary>DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.ServiceAccountName">
            <summary>ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.ShareProcessNamespace">
            <summary>Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. This field is beta-level and may be disabled with the PodShareProcessNamespace feature.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.Subdomain">
            <summary>If specified, the fully qualified Pod hostname will be "&lt;hostname&gt;.&lt;subdomain&gt;.&lt;pod namespace&gt;.svc.&lt;cluster domain&gt;". If not specified, the pod will not have a domainname at all.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.TerminationGracePeriodSeconds">
            <summary>Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.Tolerations">
            <summary>If specified, the pod's tolerations.</summary>
        </member>
        <member name="P:KubeUI.Schema.PodSpec.Volumes">
            <summary>List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes</summary>
        </member>
        <member name="T:KubeUI.Schema.PodTemplateSpec">
            <summary>PodTemplateSpec describes the data a pod should have when created from a template</summary>
        </member>
        <member name="P:KubeUI.Schema.PodTemplateSpec.Metadata">
            <summary>Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</summary>
        </member>
        <member name="P:KubeUI.Schema.PodTemplateSpec.Spec">
            <summary>Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</summary>
        </member>
        <member name="T:KubeUI.Schema.PortworxVolumeSource">
            <summary>PortworxVolumeSource represents a Portworx volume resource.</summary>
        </member>
        <member name="P:KubeUI.Schema.PortworxVolumeSource.FsType">
            <summary>FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.</summary>
        </member>
        <member name="P:KubeUI.Schema.PortworxVolumeSource.ReadOnly">
            <summary>Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</summary>
        </member>
        <member name="P:KubeUI.Schema.PortworxVolumeSource.VolumeID">
            <summary>VolumeID uniquely identifies a Portworx volume</summary>
        </member>
        <member name="T:KubeUI.Schema.PreferredSchedulingTerm">
            <summary>An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).</summary>
        </member>
        <member name="P:KubeUI.Schema.PreferredSchedulingTerm.Preference">
            <summary>A node selector term, associated with the corresponding weight.</summary>
        </member>
        <member name="P:KubeUI.Schema.PreferredSchedulingTerm.Weight">
            <summary>Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.</summary>
        </member>
        <member name="T:KubeUI.Schema.Probe">
            <summary>Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.</summary>
        </member>
        <member name="P:KubeUI.Schema.Probe.Exec">
            <summary>One and only one of the following should be specified. Exec specifies the action to take.</summary>
        </member>
        <member name="P:KubeUI.Schema.Probe.FailureThreshold">
            <summary>Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.</summary>
        </member>
        <member name="P:KubeUI.Schema.Probe.HttpGet">
            <summary>HTTPGet specifies the http request to perform.</summary>
        </member>
        <member name="P:KubeUI.Schema.Probe.InitialDelaySeconds">
            <summary>Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes</summary>
        </member>
        <member name="P:KubeUI.Schema.Probe.PeriodSeconds">
            <summary>How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.</summary>
        </member>
        <member name="P:KubeUI.Schema.Probe.SuccessThreshold">
            <summary>Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.</summary>
        </member>
        <member name="P:KubeUI.Schema.Probe.TcpSocket">
            <summary>TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported</summary>
        </member>
        <member name="P:KubeUI.Schema.Probe.TimeoutSeconds">
            <summary>Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes</summary>
        </member>
        <member name="T:KubeUI.Schema.ProjectedVolumeSource">
            <summary>Represents a projected volume source</summary>
        </member>
        <member name="P:KubeUI.Schema.ProjectedVolumeSource.DefaultMode">
            <summary>Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</summary>
        </member>
        <member name="P:KubeUI.Schema.ProjectedVolumeSource.Sources">
            <summary>list of volume projections</summary>
        </member>
        <member name="T:KubeUI.Schema.QuobyteVolumeSource">
            <summary>Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.QuobyteVolumeSource.Group">
            <summary>Group to map volume access to Default is no group</summary>
        </member>
        <member name="P:KubeUI.Schema.QuobyteVolumeSource.ReadOnly">
            <summary>ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.</summary>
        </member>
        <member name="P:KubeUI.Schema.QuobyteVolumeSource.Registry">
            <summary>Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes</summary>
        </member>
        <member name="P:KubeUI.Schema.QuobyteVolumeSource.Tenant">
            <summary>Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin</summary>
        </member>
        <member name="P:KubeUI.Schema.QuobyteVolumeSource.User">
            <summary>User to map volume access to Defaults to serivceaccount user</summary>
        </member>
        <member name="P:KubeUI.Schema.QuobyteVolumeSource.Volume">
            <summary>Volume is a string that references an already created Quobyte volume by name.</summary>
        </member>
        <member name="T:KubeUI.Schema.RBDVolumeSource">
            <summary>Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.RBDVolumeSource.FsType">
            <summary>Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd</summary>
        </member>
        <member name="P:KubeUI.Schema.RBDVolumeSource.Image">
            <summary>The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it</summary>
        </member>
        <member name="P:KubeUI.Schema.RBDVolumeSource.Keyring">
            <summary>Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it</summary>
        </member>
        <member name="P:KubeUI.Schema.RBDVolumeSource.Monitors">
            <summary>A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it</summary>
        </member>
        <member name="P:KubeUI.Schema.RBDVolumeSource.Pool">
            <summary>The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it</summary>
        </member>
        <member name="P:KubeUI.Schema.RBDVolumeSource.ReadOnly">
            <summary>ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it</summary>
        </member>
        <member name="P:KubeUI.Schema.RBDVolumeSource.SecretRef">
            <summary>SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it</summary>
        </member>
        <member name="P:KubeUI.Schema.RBDVolumeSource.User">
            <summary>The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it</summary>
        </member>
        <member name="T:KubeUI.Schema.ResourceFieldSelector">
            <summary>ResourceFieldSelector represents container resources (cpu, memory) and their output format</summary>
        </member>
        <member name="P:KubeUI.Schema.ResourceFieldSelector.ContainerName">
            <summary>Container name: required for volumes, optional for env vars</summary>
        </member>
        <member name="P:KubeUI.Schema.ResourceFieldSelector.Divisor">
            <summary>Specifies the output format of the exposed resources, defaults to "1"</summary>
        </member>
        <member name="P:KubeUI.Schema.ResourceFieldSelector.Resource">
            <summary>Required: resource to select</summary>
        </member>
        <member name="T:KubeUI.Schema.ResourceRequirements">
            <summary>ResourceRequirements describes the compute resource requirements.</summary>
        </member>
        <member name="P:KubeUI.Schema.ResourceRequirements.Limits">
            <summary>Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/</summary>
        </member>
        <member name="P:KubeUI.Schema.ResourceRequirements.Requests">
            <summary>Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/</summary>
        </member>
        <member name="T:KubeUI.Schema.SELinuxOptions">
            <summary>SELinuxOptions are the labels to be applied to the container</summary>
        </member>
        <member name="P:KubeUI.Schema.SELinuxOptions.Level">
            <summary>Level is SELinux level label that applies to the container.</summary>
        </member>
        <member name="P:KubeUI.Schema.SELinuxOptions.Role">
            <summary>Role is a SELinux role label that applies to the container.</summary>
        </member>
        <member name="P:KubeUI.Schema.SELinuxOptions.Type">
            <summary>Type is a SELinux type label that applies to the container.</summary>
        </member>
        <member name="P:KubeUI.Schema.SELinuxOptions.User">
            <summary>User is a SELinux user label that applies to the container.</summary>
        </member>
        <member name="T:KubeUI.Schema.ScaleIOVolumeSource">
            <summary>ScaleIOVolumeSource represents a persistent ScaleIO volume</summary>
        </member>
        <member name="P:KubeUI.Schema.ScaleIOVolumeSource.FsType">
            <summary>Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".</summary>
        </member>
        <member name="P:KubeUI.Schema.ScaleIOVolumeSource.Gateway">
            <summary>The host address of the ScaleIO API Gateway.</summary>
        </member>
        <member name="P:KubeUI.Schema.ScaleIOVolumeSource.ProtectionDomain">
            <summary>The name of the ScaleIO Protection Domain for the configured storage.</summary>
        </member>
        <member name="P:KubeUI.Schema.ScaleIOVolumeSource.ReadOnly">
            <summary>Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</summary>
        </member>
        <member name="P:KubeUI.Schema.ScaleIOVolumeSource.SecretRef">
            <summary>SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.</summary>
        </member>
        <member name="P:KubeUI.Schema.ScaleIOVolumeSource.SslEnabled">
            <summary>Flag to enable/disable SSL communication with Gateway, default false</summary>
        </member>
        <member name="P:KubeUI.Schema.ScaleIOVolumeSource.StorageMode">
            <summary>Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.</summary>
        </member>
        <member name="P:KubeUI.Schema.ScaleIOVolumeSource.StoragePool">
            <summary>The ScaleIO Storage Pool associated with the protection domain.</summary>
        </member>
        <member name="P:KubeUI.Schema.ScaleIOVolumeSource.System">
            <summary>The name of the storage system as configured in ScaleIO.</summary>
        </member>
        <member name="P:KubeUI.Schema.ScaleIOVolumeSource.VolumeName">
            <summary>The name of a volume already created in the ScaleIO system that is associated with this volume source.</summary>
        </member>
        <member name="T:KubeUI.Schema.Secret">
            <summary>Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.</summary>
        </member>
        <member name="P:KubeUI.Schema.Secret.ApiVersion">
            <summary>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources</summary>
        </member>
        <member name="P:KubeUI.Schema.Secret.Data">
            <summary>Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4</summary>
        </member>
        <member name="P:KubeUI.Schema.Secret.Kind">
            <summary>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.Secret.Metadata">
            <summary>Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</summary>
        </member>
        <member name="P:KubeUI.Schema.Secret.StringData">
            <summary>stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.</summary>
        </member>
        <member name="P:KubeUI.Schema.Secret.Type">
            <summary>Used to facilitate programmatic handling of secret data.</summary>
        </member>
        <member name="T:KubeUI.Schema.SecretEnvSource">
            <summary>SecretEnvSource selects a Secret to populate the environment variables with.
            
            The contents of the target Secret's Data field will represent the key-value pairs as environment variables.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecretEnvSource.Name">
            <summary>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</summary>
        </member>
        <member name="P:KubeUI.Schema.SecretEnvSource.Optional">
            <summary>Specify whether the Secret must be defined</summary>
        </member>
        <member name="T:KubeUI.Schema.SecretKeySelector">
            <summary>SecretKeySelector selects a key of a Secret.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecretKeySelector.Key">
            <summary>The key of the secret to select from.  Must be a valid secret key.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecretKeySelector.Name">
            <summary>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</summary>
        </member>
        <member name="P:KubeUI.Schema.SecretKeySelector.Optional">
            <summary>Specify whether the Secret or it's key must be defined</summary>
        </member>
        <member name="T:KubeUI.Schema.SecretProjection">
            <summary>Adapts a secret into a projected volume.
            
            The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecretProjection.Items">
            <summary>If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecretProjection.Name">
            <summary>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</summary>
        </member>
        <member name="P:KubeUI.Schema.SecretProjection.Optional">
            <summary>Specify whether the Secret or its key must be defined</summary>
        </member>
        <member name="T:KubeUI.Schema.SecretVolumeSource">
            <summary>Adapts a Secret into a volume.
            
            The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecretVolumeSource.DefaultMode">
            <summary>Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecretVolumeSource.Items">
            <summary>If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecretVolumeSource.Optional">
            <summary>Specify whether the Secret or it's keys must be defined</summary>
        </member>
        <member name="P:KubeUI.Schema.SecretVolumeSource.SecretName">
            <summary>Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret</summary>
        </member>
        <member name="T:KubeUI.Schema.SecurityContext">
            <summary>SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecurityContext.AllowPrivilegeEscalation">
            <summary>AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN</summary>
        </member>
        <member name="P:KubeUI.Schema.SecurityContext.Capabilities">
            <summary>The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecurityContext.Privileged">
            <summary>Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecurityContext.ProcMount">
            <summary>procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecurityContext.ReadOnlyRootFilesystem">
            <summary>Whether this container has a read-only root filesystem. Default is false.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecurityContext.RunAsGroup">
            <summary>The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecurityContext.RunAsNonRoot">
            <summary>Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecurityContext.RunAsUser">
            <summary>The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.</summary>
        </member>
        <member name="P:KubeUI.Schema.SecurityContext.SeLinuxOptions">
            <summary>The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.</summary>
        </member>
        <member name="T:KubeUI.Schema.Service">
            <summary>Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.</summary>
        </member>
        <member name="P:KubeUI.Schema.Service.ApiVersion">
            <summary>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources</summary>
        </member>
        <member name="P:KubeUI.Schema.Service.Kind">
            <summary>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.Service.Metadata">
            <summary>Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</summary>
        </member>
        <member name="P:KubeUI.Schema.Service.Spec">
            <summary>Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</summary>
        </member>
        <member name="P:KubeUI.Schema.Service.Status">
            <summary>Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</summary>
        </member>
        <member name="T:KubeUI.Schema.ServiceAccountTokenProjection">
            <summary>ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceAccountTokenProjection.Audience">
            <summary>Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceAccountTokenProjection.ExpirationSeconds">
            <summary>ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceAccountTokenProjection.Path">
            <summary>Path is the path relative to the mount point of the file to project the token into.</summary>
        </member>
        <member name="T:KubeUI.Schema.ServicePort">
            <summary>ServicePort contains information on service's port.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServicePort.Name">
            <summary>The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServicePort.NodePort">
            <summary>The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport</summary>
        </member>
        <member name="P:KubeUI.Schema.ServicePort.Port">
            <summary>The port that will be exposed by this service.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServicePort.Protocol">
            <summary>The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServicePort.TargetPort">
            <summary>Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service</summary>
        </member>
        <member name="T:KubeUI.Schema.ServiceSpec">
            <summary>ServiceSpec describes the attributes that a user creates on a service.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.ClusterIP">
            <summary>clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.ExternalIPs">
            <summary>externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.ExternalName">
            <summary>externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.ExternalTrafficPolicy">
            <summary>externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.HealthCheckNodePort">
            <summary>healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.LoadBalancerIP">
            <summary>Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.LoadBalancerSourceRanges">
            <summary>If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.Ports">
            <summary>The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.PublishNotReadyAddresses">
            <summary>publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.Selector">
            <summary>Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.SessionAffinity">
            <summary>Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.SessionAffinityConfig">
            <summary>sessionAffinityConfig contains the configurations of session affinity.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceSpec.Type">
            <summary>type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types</summary>
        </member>
        <member name="T:KubeUI.Schema.ServiceStatus">
            <summary>ServiceStatus represents the current status of a service.</summary>
        </member>
        <member name="P:KubeUI.Schema.ServiceStatus.LoadBalancer">
            <summary>LoadBalancer contains the current status of the load-balancer, if one is present.</summary>
        </member>
        <member name="T:KubeUI.Schema.SessionAffinityConfig">
            <summary>SessionAffinityConfig represents the configurations of session affinity.</summary>
        </member>
        <member name="P:KubeUI.Schema.SessionAffinityConfig.ClientIP">
            <summary>clientIP contains the configurations of Client IP based session affinity.</summary>
        </member>
        <member name="T:KubeUI.Schema.StorageOSVolumeSource">
            <summary>Represents a StorageOS persistent volume resource.</summary>
        </member>
        <member name="P:KubeUI.Schema.StorageOSVolumeSource.FsType">
            <summary>Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.</summary>
        </member>
        <member name="P:KubeUI.Schema.StorageOSVolumeSource.ReadOnly">
            <summary>Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</summary>
        </member>
        <member name="P:KubeUI.Schema.StorageOSVolumeSource.SecretRef">
            <summary>SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.</summary>
        </member>
        <member name="P:KubeUI.Schema.StorageOSVolumeSource.VolumeName">
            <summary>VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.</summary>
        </member>
        <member name="P:KubeUI.Schema.StorageOSVolumeSource.VolumeNamespace">
            <summary>VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.</summary>
        </member>
        <member name="T:KubeUI.Schema.Sysctl">
            <summary>Sysctl defines a kernel parameter to be set</summary>
        </member>
        <member name="P:KubeUI.Schema.Sysctl.Name">
            <summary>Name of a property to set</summary>
        </member>
        <member name="P:KubeUI.Schema.Sysctl.Value">
            <summary>Value of a property to set</summary>
        </member>
        <member name="T:KubeUI.Schema.TCPSocketAction">
            <summary>TCPSocketAction describes an action based on opening a socket</summary>
        </member>
        <member name="P:KubeUI.Schema.TCPSocketAction.Host">
            <summary>Optional: Host name to connect to, defaults to the pod IP.</summary>
        </member>
        <member name="P:KubeUI.Schema.TCPSocketAction.Port">
            <summary>Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.</summary>
        </member>
        <member name="T:KubeUI.Schema.Toleration">
            <summary>The pod this Toleration is attached to tolerates any taint that matches the triple &lt;key,value,effect&gt; using the matching operator &lt;operator&gt;.</summary>
        </member>
        <member name="P:KubeUI.Schema.Toleration.Effect">
            <summary>Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.</summary>
        </member>
        <member name="P:KubeUI.Schema.Toleration.Key">
            <summary>Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.</summary>
        </member>
        <member name="P:KubeUI.Schema.Toleration.Operator">
            <summary>Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.</summary>
        </member>
        <member name="P:KubeUI.Schema.Toleration.TolerationSeconds">
            <summary>TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.</summary>
        </member>
        <member name="P:KubeUI.Schema.Toleration.Value">
            <summary>Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.</summary>
        </member>
        <member name="T:KubeUI.Schema.TypedLocalObjectReference">
            <summary>TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.</summary>
        </member>
        <member name="P:KubeUI.Schema.TypedLocalObjectReference.ApiGroup">
            <summary>APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.</summary>
        </member>
        <member name="P:KubeUI.Schema.TypedLocalObjectReference.Kind">
            <summary>Kind is the type of resource being referenced</summary>
        </member>
        <member name="P:KubeUI.Schema.TypedLocalObjectReference.Name">
            <summary>Name is the name of resource being referenced</summary>
        </member>
        <member name="T:KubeUI.Schema.Volume">
            <summary>Volume represents a named volume in a pod that may be accessed by any container in the pod.</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.AwsElasticBlockStore">
            <summary>AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.AzureDisk">
            <summary>AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.AzureFile">
            <summary>AzureFile represents an Azure File Service mount on the host and bind mount to the pod.</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Cephfs">
            <summary>CephFS represents a Ceph FS mount on the host that shares a pod's lifetime</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Cinder">
            <summary>Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.ConfigMap">
            <summary>ConfigMap represents a configMap that should populate this volume</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Csi">
            <summary>CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.DownwardAPI">
            <summary>DownwardAPI represents downward API about the pod that should populate this volume</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.EmptyDir">
            <summary>EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Fc">
            <summary>FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.FlexVolume">
            <summary>FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Flocker">
            <summary>Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.GcePersistentDisk">
            <summary>GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.GitRepo">
            <summary>GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Glusterfs">
            <summary>Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.HostPath">
            <summary>HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Iscsi">
            <summary>ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Name">
            <summary>Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Nfs">
            <summary>NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.PersistentVolumeClaim">
            <summary>PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.PhotonPersistentDisk">
            <summary>PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.PortworxVolume">
            <summary>PortworxVolume represents a portworx volume attached and mounted on kubelets host machine</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Projected">
            <summary>Items for all in one resources secrets, configmaps, and downward API</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Quobyte">
            <summary>Quobyte represents a Quobyte mount on the host that shares a pod's lifetime</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Rbd">
            <summary>RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.ScaleIO">
            <summary>ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Secret">
            <summary>Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.Storageos">
            <summary>StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.</summary>
        </member>
        <member name="P:KubeUI.Schema.Volume.VsphereVolume">
            <summary>VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine</summary>
        </member>
        <member name="T:KubeUI.Schema.VolumeDevice">
            <summary>volumeDevice describes a mapping of a raw block device within a container.</summary>
        </member>
        <member name="P:KubeUI.Schema.VolumeDevice.DevicePath">
            <summary>devicePath is the path inside of the container that the device will be mapped to.</summary>
        </member>
        <member name="P:KubeUI.Schema.VolumeDevice.Name">
            <summary>name must match the name of a persistentVolumeClaim in the pod</summary>
        </member>
        <member name="T:KubeUI.Schema.VolumeMount">
            <summary>VolumeMount describes a mounting of a Volume within a container.</summary>
        </member>
        <member name="P:KubeUI.Schema.VolumeMount.MountPath">
            <summary>Path within the container at which the volume should be mounted.  Must not contain ':'.</summary>
        </member>
        <member name="P:KubeUI.Schema.VolumeMount.MountPropagation">
            <summary>mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.</summary>
        </member>
        <member name="P:KubeUI.Schema.VolumeMount.Name">
            <summary>This must match the Name of a Volume.</summary>
        </member>
        <member name="P:KubeUI.Schema.VolumeMount.ReadOnly">
            <summary>Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.</summary>
        </member>
        <member name="P:KubeUI.Schema.VolumeMount.SubPath">
            <summary>Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).</summary>
        </member>
        <member name="P:KubeUI.Schema.VolumeMount.SubPathExpr">
            <summary>Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive. This field is alpha in 1.14.</summary>
        </member>
        <member name="T:KubeUI.Schema.VolumeProjection">
            <summary>Projection that may be projected along with other supported volume types</summary>
        </member>
        <member name="P:KubeUI.Schema.VolumeProjection.ConfigMap">
            <summary>information about the configMap data to project</summary>
        </member>
        <member name="P:KubeUI.Schema.VolumeProjection.DownwardAPI">
            <summary>information about the downwardAPI data to project</summary>
        </member>
        <member name="P:KubeUI.Schema.VolumeProjection.Secret">
            <summary>information about the secret data to project</summary>
        </member>
        <member name="P:KubeUI.Schema.VolumeProjection.ServiceAccountToken">
            <summary>information about the serviceAccountToken data to project</summary>
        </member>
        <member name="T:KubeUI.Schema.VsphereVirtualDiskVolumeSource">
            <summary>Represents a vSphere volume resource.</summary>
        </member>
        <member name="P:KubeUI.Schema.VsphereVirtualDiskVolumeSource.FsType">
            <summary>Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.</summary>
        </member>
        <member name="P:KubeUI.Schema.VsphereVirtualDiskVolumeSource.StoragePolicyID">
            <summary>Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.</summary>
        </member>
        <member name="P:KubeUI.Schema.VsphereVirtualDiskVolumeSource.StoragePolicyName">
            <summary>Storage Policy Based Management (SPBM) profile name.</summary>
        </member>
        <member name="P:KubeUI.Schema.VsphereVirtualDiskVolumeSource.VolumePath">
            <summary>Path that identifies vSphere volume vmdk</summary>
        </member>
        <member name="T:KubeUI.Schema.WeightedPodAffinityTerm">
            <summary>The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)</summary>
        </member>
        <member name="P:KubeUI.Schema.WeightedPodAffinityTerm.PodAffinityTerm">
            <summary>Required. A pod affinity term, associated with the corresponding weight.</summary>
        </member>
        <member name="P:KubeUI.Schema.WeightedPodAffinityTerm.Weight">
            <summary>weight associated with matching the corresponding podAffinityTerm, in the range 1-100.</summary>
        </member>
        <member name="T:KubeUI.Schema.HTTPIngressPath2">
            <summary>HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.</summary>
        </member>
        <member name="P:KubeUI.Schema.HTTPIngressPath2.Backend">
            <summary>Backend defines the referenced service endpoint to which the traffic will be forwarded to.</summary>
        </member>
        <member name="P:KubeUI.Schema.HTTPIngressPath2.Path">
            <summary>Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.</summary>
        </member>
        <member name="T:KubeUI.Schema.HTTPIngressRuleValue2">
            <summary>HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://&lt;host&gt;/&lt;path&gt;?&lt;searchpart&gt; -&gt; backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.</summary>
        </member>
        <member name="P:KubeUI.Schema.HTTPIngressRuleValue2.Paths">
            <summary>A collection of paths that map requests to backends.</summary>
        </member>
        <member name="T:KubeUI.Schema.Ingress2">
            <summary>Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.</summary>
        </member>
        <member name="P:KubeUI.Schema.Ingress2.ApiVersion">
            <summary>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources</summary>
        </member>
        <member name="P:KubeUI.Schema.Ingress2.Kind">
            <summary>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.Ingress2.Metadata">
            <summary>Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</summary>
        </member>
        <member name="P:KubeUI.Schema.Ingress2.Spec">
            <summary>Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</summary>
        </member>
        <member name="P:KubeUI.Schema.Ingress2.Status">
            <summary>Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</summary>
        </member>
        <member name="T:KubeUI.Schema.IngressBackend2">
            <summary>IngressBackend describes all endpoints for a given service and port.</summary>
        </member>
        <member name="P:KubeUI.Schema.IngressBackend2.ServiceName">
            <summary>Specifies the name of the referenced service.</summary>
        </member>
        <member name="P:KubeUI.Schema.IngressBackend2.ServicePort">
            <summary>Specifies the port of the referenced service.</summary>
        </member>
        <member name="T:KubeUI.Schema.IngressRule2">
            <summary>IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.</summary>
        </member>
        <member name="P:KubeUI.Schema.IngressRule2.Host">
            <summary>Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the
            	  IP in the Spec of the parent Ingress.
            2. The `:` delimiter is not respected because ports are not allowed.
            	  Currently the port of an Ingress is implicitly :80 for http and
            	  :443 for https.
            Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.</summary>
        </member>
        <member name="T:KubeUI.Schema.IngressSpec2">
            <summary>IngressSpec describes the Ingress the user wishes to exist.</summary>
        </member>
        <member name="P:KubeUI.Schema.IngressSpec2.Backend">
            <summary>A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.</summary>
        </member>
        <member name="P:KubeUI.Schema.IngressSpec2.Rules">
            <summary>A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.</summary>
        </member>
        <member name="P:KubeUI.Schema.IngressSpec2.Tls">
            <summary>TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.</summary>
        </member>
        <member name="T:KubeUI.Schema.IngressStatus2">
            <summary>IngressStatus describe the current state of the Ingress.</summary>
        </member>
        <member name="P:KubeUI.Schema.IngressStatus2.LoadBalancer">
            <summary>LoadBalancer contains the current status of the load-balancer.</summary>
        </member>
        <member name="T:KubeUI.Schema.IngressTLS2">
            <summary>IngressTLS describes the transport layer security associated with an Ingress.</summary>
        </member>
        <member name="P:KubeUI.Schema.IngressTLS2.Hosts">
            <summary>Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.</summary>
        </member>
        <member name="P:KubeUI.Schema.IngressTLS2.SecretName">
            <summary>SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.</summary>
        </member>
        <member name="T:KubeUI.Schema.Initializer">
            <summary>Initializer is information about an initializer that has not yet completed.</summary>
        </member>
        <member name="P:KubeUI.Schema.Initializer.Name">
            <summary>name of the process that is responsible for initializing this object.</summary>
        </member>
        <member name="T:KubeUI.Schema.Initializers">
            <summary>Initializers tracks the progress of initialization.</summary>
        </member>
        <member name="P:KubeUI.Schema.Initializers.Pending">
            <summary>Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.</summary>
        </member>
        <member name="P:KubeUI.Schema.Initializers.Result">
            <summary>If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.</summary>
        </member>
        <member name="T:KubeUI.Schema.LabelSelector">
            <summary>A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.</summary>
        </member>
        <member name="P:KubeUI.Schema.LabelSelector.MatchExpressions">
            <summary>matchExpressions is a list of label selector requirements. The requirements are ANDed.</summary>
        </member>
        <member name="P:KubeUI.Schema.LabelSelector.MatchLabels">
            <summary>matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.</summary>
        </member>
        <member name="T:KubeUI.Schema.LabelSelectorRequirement">
            <summary>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.</summary>
        </member>
        <member name="P:KubeUI.Schema.LabelSelectorRequirement.Key">
            <summary>key is the label key that the selector applies to.</summary>
        </member>
        <member name="P:KubeUI.Schema.LabelSelectorRequirement.Operator">
            <summary>operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.</summary>
        </member>
        <member name="P:KubeUI.Schema.LabelSelectorRequirement.Values">
            <summary>values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.</summary>
        </member>
        <member name="T:KubeUI.Schema.ListMeta">
            <summary>ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.</summary>
        </member>
        <member name="P:KubeUI.Schema.ListMeta.Continue">
            <summary>continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.</summary>
        </member>
        <member name="P:KubeUI.Schema.ListMeta.ResourceVersion">
            <summary>String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency</summary>
        </member>
        <member name="P:KubeUI.Schema.ListMeta.SelfLink">
            <summary>selfLink is a URL representing this object. Populated by the system. Read-only.</summary>
        </member>
        <member name="T:KubeUI.Schema.ManagedFieldsEntry">
            <summary>ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.</summary>
        </member>
        <member name="P:KubeUI.Schema.ManagedFieldsEntry.ApiVersion">
            <summary>APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.</summary>
        </member>
        <member name="P:KubeUI.Schema.ManagedFieldsEntry.Fields">
            <summary>Fields identifies a set of fields.</summary>
        </member>
        <member name="P:KubeUI.Schema.ManagedFieldsEntry.Manager">
            <summary>Manager is an identifier of the workflow managing these fields.</summary>
        </member>
        <member name="P:KubeUI.Schema.ManagedFieldsEntry.Operation">
            <summary>Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.</summary>
        </member>
        <member name="P:KubeUI.Schema.ManagedFieldsEntry.Time">
            <summary>Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'</summary>
        </member>
        <member name="T:KubeUI.Schema.ObjectMeta">
            <summary>ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.Annotations">
            <summary>Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.ClusterName">
            <summary>The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.CreationTimestamp">
            <summary>CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
            
            Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.DeletionGracePeriodSeconds">
            <summary>Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.DeletionTimestamp">
            <summary>DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
            
            Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.Finalizers">
            <summary>Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.GenerateName">
            <summary>GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
            
            If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
            
            Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.Generation">
            <summary>A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.Initializers">
            <summary>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.
            
            When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.
            
            DEPRECATED - initializers are an alpha field and will be removed in v1.15.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.Labels">
            <summary>Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.ManagedFields">
            <summary>ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
            
            This field is alpha and can be changed or removed without notice.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.Name">
            <summary>Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.Namespace">
            <summary>Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
            
            Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.OwnerReferences">
            <summary>List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.ResourceVersion">
            <summary>An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
            
            Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.SelfLink">
            <summary>SelfLink is a URL representing this object. Populated by the system. Read-only.</summary>
        </member>
        <member name="P:KubeUI.Schema.ObjectMeta.Uid">
            <summary>UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
            
            Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids</summary>
        </member>
        <member name="T:KubeUI.Schema.OwnerReference">
            <summary>OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.</summary>
        </member>
        <member name="P:KubeUI.Schema.OwnerReference.ApiVersion">
            <summary>API version of the referent.</summary>
        </member>
        <member name="P:KubeUI.Schema.OwnerReference.BlockOwnerDeletion">
            <summary>If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.</summary>
        </member>
        <member name="P:KubeUI.Schema.OwnerReference.Controller">
            <summary>If true, this reference points to the managing controller.</summary>
        </member>
        <member name="P:KubeUI.Schema.OwnerReference.Kind">
            <summary>Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.OwnerReference.Name">
            <summary>Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names</summary>
        </member>
        <member name="P:KubeUI.Schema.OwnerReference.Uid">
            <summary>UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids</summary>
        </member>
        <member name="T:KubeUI.Schema.Status">
            <summary>Status is a return value for calls that don't return other objects.</summary>
        </member>
        <member name="P:KubeUI.Schema.Status.ApiVersion">
            <summary>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources</summary>
        </member>
        <member name="P:KubeUI.Schema.Status.Code">
            <summary>Suggested HTTP return code for this status, 0 if not set.</summary>
        </member>
        <member name="P:KubeUI.Schema.Status.Details">
            <summary>Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.</summary>
        </member>
        <member name="P:KubeUI.Schema.Status.Kind">
            <summary>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.Status.Message">
            <summary>A human-readable description of the status of this operation.</summary>
        </member>
        <member name="P:KubeUI.Schema.Status.Metadata">
            <summary>Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.Status.Reason">
            <summary>A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.</summary>
        </member>
        <member name="P:KubeUI.Schema.Status.Status1">
            <summary>Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status</summary>
        </member>
        <member name="T:KubeUI.Schema.StatusCause">
            <summary>StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatusCause.Field">
            <summary>The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
            
            Examples:
              "name" - the field "name" on the current resource
              "items[0].name" - the field "name" on the first array entry in "items"</summary>
        </member>
        <member name="P:KubeUI.Schema.StatusCause.Message">
            <summary>A human-readable description of the cause of the error.  This field may be presented as-is to a reader.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatusCause.Reason">
            <summary>A machine-readable description of the cause of the error. If this value is empty there is no information available.</summary>
        </member>
        <member name="T:KubeUI.Schema.StatusDetails">
            <summary>StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatusDetails.Causes">
            <summary>The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatusDetails.Group">
            <summary>The group attribute of the resource associated with the status StatusReason.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatusDetails.Kind">
            <summary>The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</summary>
        </member>
        <member name="P:KubeUI.Schema.StatusDetails.Name">
            <summary>The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).</summary>
        </member>
        <member name="P:KubeUI.Schema.StatusDetails.RetryAfterSeconds">
            <summary>If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.</summary>
        </member>
        <member name="P:KubeUI.Schema.StatusDetails.Uid">
            <summary>UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.ContainerPort.ContainerPort1">
            <summary>Number of port to expose on the pod's IP address. This must be a valid port number, 0 &lt; x &lt; 65536.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.ContainerPort.HostIP">
            <summary>What host IP to bind the external port to.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.ContainerPort.HostPort">
            <summary>Number of port to expose on the host. If specified, this must be a valid port number, 0 &lt; x &lt; 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.ContainerPort.Name">
            <summary>If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.ContainerPort.Protocol">
            <summary>Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.PersistentVolumeClaimSpec.AccessModes">
            <summary>AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.NodeAffinity.PreferredDuringSchedulingIgnoredDuringExecution">
            <summary>The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution">
            <summary>If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.NodeSelector.NodeSelectorTerms">
            <summary>Required. A list of node selector terms. The terms are ORed.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.NodeSelectorRequirement.Key">
            <summary>The label key that the selector applies to.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.NodeSelectorRequirement.Operator">
            <summary>Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.NodeSelectorRequirement.Values">
            <summary>An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.Secret.Type">
            <summary>Used to facilitate programmatic handling of secret data.</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.ServiceSpec.ClusterIP">
            <summary>clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.ServiceSpec.ExternalIPs">
            <summary>externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.ServiceSpec.ExternalName">
            <summary>externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.ServiceSpec.ExternalTrafficPolicy">
            <summary>externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.ServiceSpec.HealthCheckNodePort">
            <summary>healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.ServiceSpec.LoadBalancerIP">
            <summary>Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.ServiceSpec.LoadBalancerSourceRanges">
            <summary>If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.ServiceSpec.Ports">
            <summary>The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.ServiceSpec.PublishNotReadyAddresses">
            <summary>publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.ServiceSpec.SessionAffinity">
            <summary>Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.ServiceSpec.Type">
            <summary>type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types</summary>
        </member>
        <member name="T:KubeUI.SchemaExtentions.ServicePort">
            <summary>ServicePort contains information on service's port.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.ServicePort.Name">
            <summary>The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.ServicePort.NodePort">
            <summary>The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.ServicePort.Port">
            <summary>The port that will be exposed by this service.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.ServicePort.Protocol">
            <summary>The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.ServicePort.TargetPort">
            <summary>Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service</summary>
        </member>
        <member name="F:KubeUI.SchemaExtentions.StatefulSetSpec.VolumeClaimTemplates">
            <summary>volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.DaemonSetUpdateStrategy.Type">
            <summary>Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.VolumeMount.MountPath">
            <summary>Path within the container at which the volume should be mounted.  Must not contain ':'.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.VolumeMount.MountPropagation">
            <summary>mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.VolumeMount.Name">
            <summary>This must match the Name of a Volume.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.VolumeMount.ReadOnly">
            <summary>Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.VolumeMount.SubPath">
            <summary>Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.VolumeMount.SubPathExpr">
            <summary>Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive. This field is alpha in 1.14.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.Toleration.Effect">
            <summary>Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.Toleration.Key">
            <summary>Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.Toleration.Operator">
            <summary>Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.Toleration.TolerationSeconds">
            <summary>TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.</summary>
        </member>
        <member name="P:KubeUI.SchemaExtentions.Toleration.Value">
            <summary>Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.</summary>
        </member>
        <member name="T:KubeUI.UILevel">
            <summary>
            Controls which level of options will be displayed.
            </summary>
        </member>
        <member name="F:KubeUI.UILevel.Basic">
            <summary>
            Basic Options
            </summary>
        </member>
        <member name="F:KubeUI.UILevel.Advanced">
            <summary>
            Advanced Options
            </summary>
        </member>
        <member name="F:KubeUI.UILevel.Expert">
            <summary>
            Expert Options
            </summary>
        </member>
    </members>
</doc>
