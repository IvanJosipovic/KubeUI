<div class="top-row pl-3 navbar navbar-dark">
    <a class="navbar-brand" href="@state.Namespace">
        <img src="/favicon-32x32.png" width="32" height="32" class="d-inline-block" alt="">
        KubeUI
    </a>
    <button class="navbar-toggler" @onclick=@ToggleNavMenu>
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class=@(collapseNavMenu ? "collapse" : null) @onclick=@ToggleNavMenu>
    <ul class="nav flex-column">
        <li class="nav-item px-1">
            <NavLink class="nav-link" href="@state.Namespace" Match=NavLinkMatch.All>
                <i class="fa fa-home fa-lg"></i>&nbsp;Home
            </NavLink>
        </li>
        <li class="nav-item px-1">
            <NavLink class="nav-link" href="@($"/{state.Namespace}/Connect")">
                <i class="fa fa-download fa-lg"></i>&nbsp;Connect
            </NavLink>
        </li>
        <li class="nav-item px-1">
            <NavLink class="nav-link" href="@($"/{state.Namespace}/Deployments")">
                <img src="/png/resources/unlabeled/deploy-128.png" width="22" style="filter: grayscale(40%)" /><span>&nbsp;</span>Deployments
            </NavLink>
        </li>
    </ul>
</div>

@code {
    [Inject] ILogger<NavMenu> Logger { get; set; }
    [Inject] IState state { get; set; }

    bool collapseNavMenu = true;

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    PropertyChangedEventHandler handler;

    protected override void OnInitialized()
    {
        handler = (xo, e) =>
        {
            if (e.PropertyName == State.UILevelNotification || e.PropertyName == State.NamespaceNotification)
            {
                StateHasChanged();
            }
        };

        state.PropertyChanged += handler;
    }

    public void Dispose()
    {
        state.PropertyChanged -= handler;
    }

    //private string GetIconCode(Type type)
    //{
    //    if (type == typeof(Schema.ConfigMap))
    //    {
    //        return "cm";
    //    }
    //    else if (type == typeof(Schema.CronJob))
    //    {
    //        return "cronjob";
    //    }
    //    else if (type == typeof(Schema.DaemonSet))
    //    {
    //        return "ds";
    //    }
    //    else if (type == typeof(Schema.Deployment))
    //    {
    //        return "deploy";
    //    }
    //    else if (type == typeof(Schema.Ingress2))
    //    {
    //        return "ing";
    //    }
    //    else if (type == typeof(Schema.PersistentVolumeClaim))
    //    {
    //        return "pvc";
    //    }
    //    else if (type == typeof(Schema.Secret))
    //    {
    //        return "secret";
    //    }
    //    else if (type == typeof(Schema.Service))
    //    {
    //        return "svc";
    //    }
    //    else if (type == typeof(Schema.StatefulSet))
    //    {
    //        return "sts";
    //    }

    //    Logger.LogError("Missing Icon: {0}", type.Name);
    //    return "";
    //}
}
