@typeparam TableItem
@implements IColumn<TableItem>
@using System.Linq.Expressions
@using System.Reflection

@code {
    [CascadingParameter(Name = "Table")] private ITable<TableItem> Table { get; set; }

    private string title;

    /// <summary>
    /// Title
    /// </summary>
    [Parameter] public string Title 
    { 
        get { return title == null ? GetPropertyMemberInfo().Name : title;  } 
        set { title = value; } 
    }

    /// <summary>
    /// Width auto|value|initial|inherit
    /// </summary>
    [Parameter] public string Width { get; set; }

    /// <summary>
    /// Column can be sorted
    /// </summary>
    [Parameter] public bool Sortable { get; set; }

    /// <summary>
    /// Column can be filtered
    /// </summary>
    [Parameter] public bool Filterable { get; set; }

    public bool FilterOpen { get; private set; }

    /// <summary>
    /// Normal Item Template
    /// </summary>
    [Parameter] public RenderFragment<TableItem> Template { get; set; }

    /// <summary>
    /// Edit Mode Item Template
    /// </summary>
    [Parameter] public RenderFragment<TableItem> EditorTemplate { get; set; }

    /// <summary>
    /// Select Which Property To Sort On
    /// Required when Sort = true
    /// </summary>
    [Parameter] public Expression<Func<TableItem, object>> Property { get; set; }

    public MemberInfo GetPropertyMemberInfo()
    {
        if (Property == null)
        {
            return null;
        }

        MemberExpression body = Property.Body as MemberExpression;

        if (body == null) {
            UnaryExpression ubody = (UnaryExpression)Property.Body;
            body = ubody.Operand as MemberExpression;
        }

        return body?.Member;
    }

    public void Dispose()
    {
        this.Table.RemoveColumn(this);
    }

    protected override void OnInitialized()
    {
        this.Table.AddColumn(this);
    }

    protected override void OnParametersSet()
    {
        if (Sortable && Property == null)
        {
            throw new Exception($"Column {Title} Property paramter is null");
        }

        if (title == null && Property == null)
        {
            throw new Exception($"A Column has both Title and Property paramters null");
        }
    }

    public void ToggleFilter()
    {
        FilterOpen = !FilterOpen;
    }
}