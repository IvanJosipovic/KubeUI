@typeparam TableItem
@implements IColumn<TableItem>
@using System.Linq.Expressions

@code {
    [CascadingParameter(Name = "Table")] private ITable<TableItem> Table { get; set; }

    /// <summary>
    /// Title
    /// </summary>
    [Parameter] public string Title { get; set; } = String.Empty;

    /// <summary>
    /// Width auto|value|initial|inherit
    /// </summary>
    [Parameter] public string Width { get; set; }

    /// <summary>
    /// When true Edit Model is enabled
    /// </summary>
    [Parameter] public bool Editable { get; set; }

    /// <summary>
    /// Column can be sorted
    /// </summary>
    [Parameter] public bool Sortable { get; set; }

    /// <summary>
    /// Normal Item Template
    /// </summary>
    [Parameter] public RenderFragment<TableItem> Template { get; set; }

    /// <summary>
    /// Edit Mode Item Template
    /// </summary>
    [Parameter] public RenderFragment<TableItem> EditorTemplate { get; set; }

    /// <summary>
    /// Select Which Property To Sort On
    /// Required when Sort = true
    /// </summary>
    [Parameter] public Expression<Func<TableItem, object>> Property { get; set; }

    public string GetPropertyName()
    {
        if (Property == null)
        {
            return null;
        }

        MemberExpression body = Property.Body as MemberExpression;

        if (body == null) {
            UnaryExpression ubody = (UnaryExpression)Property.Body;
            body = ubody.Operand as MemberExpression;
        }

        return body.Member.Name;
    }

    public void Dispose()
    {
        this.Table.RemoveColumn(this);
    }

    protected override void OnInitialized()
    {
        this.Table.AddColumn(this);
    }

    protected override void OnParametersSet()
    {
        if (Sortable && Property == null)
        {
            throw new Exception($"Column {Title} Property paramter is null");
        }
    }
}
